!function(e){function n(n){for(var t,o,i=n[0],a=n[1],c=0,l=[];c<i.length;c++)o=i[c],Object.prototype.hasOwnProperty.call(r,o)&&r[o]&&l.push(r[o][0]),r[o]=0;for(t in a)Object.prototype.hasOwnProperty.call(a,t)&&(e[t]=a[t]);for(s&&s(n);l.length;)l.shift()()}var t={},r={0:0};function o(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.e=function(e){var n=[],t=r[e];if(0!==t)if(t)n.push(t[2]);else{var i=new Promise((function(n,o){t=r[e]=[n,o]}));n.push(t[2]=i);var a,c=document.createElement("script");c.charset="utf-8",c.timeout=120,o.nc&&c.setAttribute("nonce",o.nc),c.src=function(e){return o.p+""+({1:"vendors~tone"}[e]||e)+".bundle.js"}(e);var s=new Error;a=function(n){c.onerror=c.onload=null,clearTimeout(l);var t=r[e];if(0!==t){if(t){var o=n&&("load"===n.type?"missing":n.type),i=n&&n.target&&n.target.src;s.message="Loading chunk "+e+" failed.\n("+o+": "+i+")",s.name="ChunkLoadError",s.type=o,s.request=i,t[1](s)}r[e]=void 0}};var l=setTimeout((function(){a({type:"timeout",target:c})}),12e4);c.onerror=c.onload=a,document.head.appendChild(c)}return Promise.all(n)},o.m=e,o.c=t,o.d=function(e,n,t){o.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,n){if(1&n&&(e=o(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(o.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var r in e)o.d(t,r,function(n){return e[n]}.bind(null,r));return t},o.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(n,"a",n),n},o.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},o.p="",o.oe=function(e){throw console.error(e),e};var i=window.webpackJsonp=window.webpackJsonp||[],a=i.push.bind(i);i.push=n,i=i.slice();for(var c=0;c<i.length;c++)n(i[c]);var s=a;o(o.s=26)}([function(e,n,t){var r=t(13),o=t(14);e.exports=function(e){return r(e)||o(e)}},function(e,n,t){"use strict";var r=t(0),o=t(2),i=/\s*\|\s*|\s*,\s*|\s+/;function a(e){return c(e)?e:"string"==typeof e?e.trim().split(i):null==e?[]:[e]}var c=Array.isArray;function s(e){return c(e)?o(e):e}function l(e){return e}function u(e,n){return arguments.length>1?u(e)(n):function(n){var t=a(n);if(!1===e)return t;if(null===e)e=l;else if("function"!=typeof e)throw Error("Invalid function");if(c(t[0]))return e(t);var o=e(t.map(r));return c(o)?o.map(s):o}}var d={transform:u,split:u(!1),map:function e(n,t){return arguments.length>1?e(n)(t):u((function(e){return e.map(n)}))},reduce:function e(n,t,r){return 1===arguments.length?function(t,r){return e(n,t,r)}:arguments.length>2?e(n,t)(r):u((function(e){return e.reduce(n,t)}))},filter:function e(n,t){return arguments.length>1?e(n)(t):u((function(e){return e.filter(n)}))},rotate:function(e,n){var t=a(n),r=t.length,o=(e%r+r)%r;return t.slice(o,r).concat(t.slice(0,o))},select:function e(n,t){if(1===arguments.length)return function(t){return e(n,t)};var r=a(t);return a(n).map((function(e){return r[e-1]}))}};e.exports&&(e.exports=d),"undefined"!=typeof window&&(window.gamut=d)},function(e,n,t){var r=t(17),o=t(19);e.exports=function(e){return r(e)||o(e)}},function(e,n,t){"use strict";var r=t(12),o=t(21),i=t(24),a=t(5);function c(e,n){if(1===arguments.lenght)return function(n){return c(e,n)};var t=i[e];return"string"==typeof t&&(t=i[t]),t||(t=r(e)),o(t,n)}c.get=function(e){var n=a.exec(e);return n&&n[5]?c(n[5],n[1]+n[2]+n[3]):[]},c.names=function(e){return e?Object.keys(i):Object.keys(i).reduce((function(e,n){return"string"!=typeof i[n]&&e.push(n),e}),[])},e.exports=c},function(e,n,t){"use strict";e.exports=function(e){var n={};return function(t){return"string"!=typeof t?null:t in n?n[t]:n[t]=e(t)}}},function(e,n,t){"use strict";e.exports=/^([a-gA-G])(#{1,}|b{1,}|x{1,}|)(-?\d*)(\/\d+|)\s*(.*)\s*$/},function(e,n,t){"use strict";var r=[[3,1],[0,0],[4,0],[1,-1],[5,-1],[2,-2],[6,-2],[3,-3]];e.exports=function(e){if(!Array.isArray(e))return null;var n=(e[0]+1)%7;n<0&&(n=7+n);var t=r[n],o=Math.floor((e[0]+1)/7),i=1===e.length?null:e[1]-t[1]+4*o,a=e[2]||null;return[t[0],o,i,a]}},function(e,n,t){"use strict";function r(e,n){return 1===n?e:function(n,t){return 1===arguments.length?function(t){return e(n,t)}:e(n,t)}}e.exports=function e(n,t,o){return 2===arguments.length?function(r){return e(n,t,r)}:r((function(e,r){var i=n(e),a=n(r);if(!i&&!a)return o(e,r);var c=o(i||e,a||r);return t(c)||c}),o.length)}},function(e,n,t){var r=t(9),o=t(10);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var i={insert:"head",singleton:!1};r(o,i);e.exports=o.locals||{}},function(e,n,t){"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var e={};return function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}e[n]=t}return e[n]}}(),a=[];function c(e){for(var n=-1,t=0;t<a.length;t++)if(a[t].identifier===e){n=t;break}return n}function s(e,n){for(var t={},r=[],o=0;o<e.length;o++){var i=e[o],s=n.base?i[0]+n.base:i[0],l=t[s]||0,u="".concat(s," ").concat(l);t[s]=l+1;var d=c(u),f={css:i[1],media:i[2],sourceMap:i[3]};-1!==d?(a[d].references++,a[d].updater(f)):a.push({identifier:u,updater:h(f,n),references:1}),r.push(u)}return r}function l(e){var n=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var o=t.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(e){n.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(n);else{var a=i(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(n)}return n}var u,d=(u=[],function(e,n){return u[e]=n,u.filter(Boolean).join("\n")});function f(e,n,t,r){var o=t?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=d(n,o);else{var i=document.createTextNode(o),a=e.childNodes;a[n]&&e.removeChild(a[n]),a.length?e.insertBefore(i,a[n]):e.appendChild(i)}}function m(e,n,t){var r=t.css,o=t.media,i=t.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),i&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var b=null,p=0;function h(e,n){var t,r,o;if(n.singleton){var i=p++;t=b||(b=l(n)),r=f.bind(null,t,i,!1),o=f.bind(null,t,i,!0)}else t=l(n),r=m.bind(null,t,n),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)};return r(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;r(e=n)}else o()}}e.exports=function(e,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=o());var t=s(e=e||[],n);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<t.length;r++){var o=c(t[r]);a[o].references--}for(var i=s(e,n),l=0;l<t.length;l++){var u=c(t[l]);0===a[u].references&&(a[u].updater(),a.splice(u,1))}t=i}}}},function(e,n,t){(n=t(11)(!1)).push([e.i,"html {\n  width: 100%;\n  height: 100%;\n  margin: none;\n  padding: none;\n  font-size: 16px;\n  font-family: sans-serif;\n  background-color: #ff0088;\n  color: #fff;\n}\n\n:focus { outline:none; }\n::-moz-focus-inner { border:0; }\n\nlabel {\n  font-weight: bold;\n}\n\n.loader, .message {\n  position: absolute;\n  top: 0;\n  left: 0;\n  text-align: center;\n  font-size: 2rem;\n  display: none;\n}\n\n.message {\n  top: 50vh;\n  left: 50vw;\n  transform: translate(-50%, -50%);\n  background-color: #000;\n  padding: 2rem 0;\n  cursor: pointer;\n  width: 100vw;\n}\n\n.loader {\n  background-color: #ff0088;\n  width: 100vw;\n  line-height: 100vh;\n}\n\n.loader.loading-data, .loader.loading-audio {\n  display: block;\n}\n\n.message.visible {\n  display: block;\n}\n\n.visualizer {\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: -1;\n  max-width: 100vw;\n  max-height: 100vh;\n}\n\n.endpoint-selector, .tonic-selector, .scale-selector, .btn-audio, .btn-reset {\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n  font-weight: bold;\n  color: #fff;\n  font-size: 2rem;\n  line-height: 2rem;\n  border: none;\n  background-color: transparent;\n}\n\n.tonic-selector, .scale-selector, .btn-audio, .btn-reset {\n  position: absolute;\n  bottom: 2rem;\n}\n\n.tonic-selector, .scale-selector {\n  font-size: 1.5rem;\n  text-align: right;\n  text-align-last: right;\n}\n\n.tonic-selector option, .scale-selector option {\n  color: #000;\n  font-size: 1rem;\n}\n\n.tonic-selector {\n  width: 2rem;\n  right: 2rem;\n}\n\n.scale-selector {\n  right: 4rem;\n}\n\nbutton {\n  height: 2rem;\n}\n\nbutton:disabled {\n  opacity: 0.6;\n}\n\n.btn-audio {\n  left: 2rem;\n}\n\n.btn-audio:before, .btn-reset:before {\n  font-size: 0.5em;\n  line-height: 2rem;\n  vertical-align: text-top;\n}\n\n.btn-audio:before, .btn-reset:before {\n  content: '\\2590\\A0\\258C';\n}\n\n.btn-audio.paused:before {\n  font-size: 1em;\n  content: '\\25BA';\n}\n\n.btn-reset {\n  left: 11rem;\n  font-size: 1rem;\n  line-height: 1rem;\n  height: 1.5rem;\n}\n\n.btn-reset:before {\n  line-height: 1rem;\n  font-size: 1.25em;\n  content: '\\21BB';\n}\n\n.endpoint-selector {\n  font-size: 1rem;\n}\n\n.playlist {\n  font-size: 0.8rem;\n  color: #ffffff;\n  font-weight: bold;\n}\n",""]),e.exports=n},function(e,n,t){"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=function(e,n){var t=e[1]||"",r=e[3];if(!r)return t;if(n&&"function"==typeof btoa){var o=(a=r,c=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),"/*# ".concat(s," */")),i=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([o]).join("\n")}var a,c,s;return[t].join("\n")}(n,e);return n[2]?"@media ".concat(n[2]," {").concat(t,"}"):t})).join("")},n.i=function(e,t,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var c=0;c<e.length;c++){var s=[].concat(e[c]);r&&o[s[0]]||(t&&(s[2]?s[2]="".concat(t," and ").concat(s[2]):s[2]=t),n.push(s))}},n}},function(e,n,t){"use strict";var r=t(1),o=t(20);function i(e){return 2===e.length?[e[0],-Math.floor(7*e[0]/12)]:[e[0]]}function a(e,n){return e[0]===n[0]}e.exports=function(e){return r.transform((function(e){if(0===e.length)return[];var n=function(e){var n=o(!0,e);return n.reduce((function(e,t,r){return 0!==r&&a(n[r-1],t)||e.push(t),e}),[])}(e.map(i));return 2!==n[0].length&&(n=function(e,n){return r.rotate(function(e,n){for(var t=0,r=n.length;t<r;t++)if(a(e,n[t]))return t}(e,n),n)}(e[0],n)),n}))(e)}},function(e,n,t){"use strict";var r=t(4),o=t(5),i={C:[0,0],D:[2,-1],E:[4,-2],F:[-1,1],G:[1,0],A:[3,-1],B:[5,-2]};e.exports=r((function(e){var n=o.exec(e);if(!n||n[5])return null;var t=i[n[1].toUpperCase()],r=n[2].replace(/x/g,"##").length;"b"===n[2][0]&&(r*=-1);var a=t[0]+7*r;return n[3]?[a,+n[3]+t[1]-4*r,n[4]?+n[4].substring(1):null]:[a]}))},function(e,n,t){"use strict";var r=t(4),o=t(15),i=t(16),a={P:{dddd:-4,ddd:-3,dd:-2,d:-1,P:0,A:1,AA:2,AAA:3,AAAA:4},M:{ddd:-4,dd:-3,d:-2,m:-1,M:0,A:1,AA:2,AAA:3,AAAA:4}};e.exports=r((function(e){var n=i.exec(e);if(!n)return null;var t,r="-"===(n[2]||n[7])?-1:1,c=+(n[3]||n[8])-1,s=n[4]||n[6]||"",l=c%7;if(""===s)t=0;else if("#"===s[0])t=s.length;else if("b"===s[0])t=-s.length;else if(void 0===(t=a["PMMPPMM"[l]][s]))return null;var u=Math.floor(c/7),d=o(l,t,u);return 1===r?d:[-d[0],-d[1]]}))},function(e,n,t){"use strict";var r=[[0,0],[2,-1],[4,-2],[-1,1],[1,0],[3,-1],[5,-2]];e.exports=function(e,n,t,o){var i=r[e];n=n||0;var a=i[0]+7*n;if(void 0===t)return[a];var c=t+i[1]-4*n;return void 0===o?[a,c]:[a,c,o]}},function(e,n){e.exports=new RegExp("^(?:(([-+]?)(\\d+)(d{1,4}|m|M|P|A{1,4}|b{1,4}|#{1,4}|))|((AA|A|P|M|m|d|dd)([-+]?)(\\d+)))$")},function(e,n,t){"use strict";var r=t(6),o=t(18),i={};e.exports=function(e){if(!Array.isArray(e)||e.length<1||2===e.length)return null;var n,t="|"+e[0]+"|"+e[1]+"|"+e[2];return t in i?i[t]:i[t]=(n=r(e),a[n[0]]+o(n[1])+(null!==n[2]?n[2]:"")+(null!==n[3]?"/"+n[3]:""))};var a=["C","D","E","F","G","A","B"]},function(e,n,t){"use strict";e.exports=function(e){return e<0?Array(1-e).join("b"):e>0?Array(e+1).join("#"):""}},function(e,n,t){"use strict";var r=t(6),o={};e.exports=function(e){if(!Array.isArray(e)||2!==e.length)return null;var n="|"+e[0]+"|"+e[1];return n in o?o[n]:o[n]=function(e){var n,t,o,a=r(e),c="PMMPPMM"[a[0]];a[2]<0?(n=-1,t=8-a[0]-7*(a[2]+1),o="P"===c?-a[1]:-(a[1]+1)):(n=1,t=a[0]+1+7*a[2],o=a[1]);var s=i[c][4+o];return n*t+s}(e)};var i={P:["dddd","ddd","dd","d","P","A","AA","AAA","AAAA"],M:["ddd","dd","d","m","M","A","AA","AAA","AAAA"]}},function(e,n,t){"use strict";var r=t(1).transform;function o(e,n){return a(e)-a(n)}function i(e,n){return-o(e,n)}function a(e){if(!e)return-1/0;var n=7*e[0];return n+12*(e[1]||0===e[1]?e[1]:-Math.floor(n/12)-10)}e.exports=function e(n,t){return arguments.length>1?e(n)(t):(null===n||!0===n?n=o:!1===n&&(n=i),r((function(e){return e.sort(n)})))}},function(e,n,t){"use strict";var r=t(0),o=t(1),i=t(22),a=t(23);function c(e,n){return 1===arguments.length?function(n){return c(e,n)}:o.transform((function(e){if(null===n)return e;var t=e[0],o=e.map(i(t));return!1===n?o:(n=r(n),o.map(a(n)))}),e)}e.exports&&(e.exports=c),"undefined"!=typeof window&&(window.harmonize=c)},function(e,n,t){var r=t(0),o=t(2),i=t(7)(r,o);e.exports=i((function(e,n){if(!Array.isArray(e)||!Array.isArray(n))return null;if(1===e.length||1===n.length){var t=n[0]-e[0];return[t,-Math.floor(7*t/12)]}return[n[0]-e[0],n[1]-e[1]]}))},function(e,n,t){var r=t(0),o=t(2),i=t(7)(r,o)((function(e,n){if(!1===e)return n;if(!Array.isArray(e)||!Array.isArray(n))return null;if(1===e.length||1===n.length)return[n[0]+e[0]];var t=2===e.length&&2===n.length?null:n[2]||e[2];return[n[0]+e[0],n[1]+e[1],t]}));e.exports&&(e.exports=i),"undefined"!=typeof window&&(window.transpose=i)},function(e,n,t){"use strict";var r=t(25);e.exports=Object.keys(r).reduce((function(e,n){return e[n]=r[n][0].split(" "),r[n][1]&&r[n][1].forEach((function(t){e[t]=n})),e}),{})},function(e){e.exports=JSON.parse('{"lydian":["1 2 3 4# 5 6 7"],"major":["1 2 3 4 5 6 7",["ionian"]],"mixolydian":["1 2 3 4 5 6 7b",["dominant"]],"dorian":["1 2 3b 4 5 6 7b"],"aeolian":["1 2 3b 4 5 6b 7b",["minor"]],"phrygian":["1 2b 3b 4 5 6b 7b"],"locrian":["1 2b 3b 4 5b 6b 7b"],"melodic minor":["1 2 3b 4 5 6 7"],"melodic minor second mode":["1 2b 3b 4 5 6 7b"],"lydian augmented":["1 2 3 4# 5A 6 7"],"lydian dominant":["1 2 3 4# 5 6 7b",["lydian b7"]],"melodic minor fifth mode":["1 2 3 4 5 6b 7b",["hindu","mixolydian b6"]],"locrian #2":["1 2 3b 4 5b 6b 7b"],"locrian major":["1 2 3 4 5b 6b 7b",["arabian"]],"altered":["1 2b 3b 3 5b 6b 7b",["super locrian","diminished whole tone","pomeroy"]],"major pentatonic":["1 2 3 5 6",["pentatonic"]],"lydian pentatonic":["1 3 4# 5 7",["chinese"]],"mixolydian pentatonic":["1 3 4 5 7b",["indian"]],"locrian pentatonic":["1 3b 4 5b 7b",["minor seven flat five pentatonic"]],"minor pentatonic":["1 3b 4 5 7b"],"minor six pentatonic":["1 3b 4 5 6"],"minor hexatonic":["1 2 3b 4 5 7"],"flat three pentatonic":["1 2 3b 5 6",["kumoi"]],"flat six pentatonic":["1 2 3 5 6b"],"major flat two pentatonic":["1 2b 3 5 6"],"whole tone pentatonic":["1 3 5b 6b 7b"],"ionian pentatonic":["1 3 4 5 7"],"lydian #5 pentatonic":["1 3 4# 5A 7"],"lydian dominant pentatonic":["1 3 4# 5 7b"],"minor #7 pentatonic":["1 3b 4 5 7"],"super locrian pentatonic":["1 3b 4d 5b 7b"],"in-sen":["1 2b 4 5 7b"],"iwato":["1 2b 4 5b 7b"],"hirajoshi":["1 2 3b 5 6b"],"kumoijoshi":["1 2b 4 5 6b"],"pelog":["1 2b 3b 5 6b"],"vietnamese 1":["1 3b 4 5 6b"],"vietnamese 2":["1 3b 4 5 7b"],"prometheus":["1 2 3 4# 6 7b"],"prometheus neopolitan":["1 2b 3 4# 6 7b"],"ritusen":["1 2 4 5 6"],"scriabin":["1 2b 3 5 6"],"piongio":["1 2 4 5 6 7b"],"major blues":["1 2 3b 3 5 6"],"minor blues":["1 3b 4 5b 5 7b",["blues"]],"composite blues":["1 2 3b 3 4 5b 5 6 7b"],"augmented":["1 2A 3 5 5A 7"],"augmented heptatonic":["1 2A 3 4 5 5A 7"],"dorian #4":["1 2 3b 4# 5 6 7b"],"lydian diminished":["1 2 3b 4# 5 6 7"],"whole tone":["1 2 3 4# 5A 7b"],"leading whole tone":["1 2 3 4# 5A 7b 7"],"harmonic minor":["1 2 3b 4 5 6b 7"],"lydian minor":["1 2 3 4# 5 6b 7b"],"neopolitan":["1 2b 3b 4 5 6b 7"],"neopolitan minor":["1 2b 3b 4 5 6b 7b"],"neopolitan major":["1 2b 3b 4 5 6 7",["dorian b2"]],"neopolitan major pentatonic":["1 3 4 5b 7b"],"romanian minor":["1 2 3b 5b 5 6 7b"],"double harmonic lydian":["1 2b 3 4# 5 6b 7"],"diminished":["1 2 3b 4 5b 6b 6 7"],"harmonic major":["1 2 3 4 5 6b 7"],"double harmonic major":["1 2b 3 4 5 6b 7",["gypsy"]],"egyptian":["1 2 4 5 7b"],"hungarian minor":["1 2 3b 4# 5 6b 7"],"hungarian major":["1 2A 3 4# 5 6 7b"],"oriental":["1 2b 3 4 5b 6 7b"],"spanish":["1 2b 3 4 5 6b 7b",["phrygian major"]],"spanish heptatonic":["1 2b 3b 3 4 5 6b 7b"],"flamenco":["1 2b 3b 3 4# 5 7b"],"balinese":["1 2b 3b 4 5 6b 7"],"todi raga":["1 2b 3b 4# 5 6b 7"],"malkos raga":["1 3b 4 6b 7b"],"kafi raga":["1 3b 3 4 5 6 7b 7"],"purvi raga":["1 2b 3 4 4# 5 6b 7"],"persian":["1 2b 3 4 5b 6b 7"],"bebop":["1 2 3 4 5 6 7b 7"],"bebop dominant":["1 2 3 4 5 6 7b 7"],"bebop minor":["1 2 3b 3 4 5 6 7b"],"bebop major":["1 2 3 4 5 5A 6 7"],"bebop locrian":["1 2b 3b 4 5b 5 6b 7b"],"minor bebop":["1 2 3b 4 5 6b 7b 7"],"mystery #1":["1 2b 3 5b 6b 7b"],"enigmatic":["1 2b 3 5b 6b 7b 7"],"minor six diminished":["1 2 3b 4 5 6b 6 7"],"ionian augmented":["1 2 3 4 5A 6 7"],"lydian #9":["1 2b 3 4# 5 6 7"],"ichikosucho":["1 2 3 4 5b 5 6 7"],"six tone symmetric":["1 2b 3 4 5A 6"]}')},function(e,n,t){"use strict";t.r(n);var r={};t.r(r),t.d(r,"EVENT_PLAY",(function(){return c})),t.d(r,"EVENT_PAUSE",(function(){return s})),t.d(r,"EVENT_RESET",(function(){return l})),t.d(r,"EVENT_PLAYBACK",(function(){return u})),t.d(r,"EVENT_AUDIO_UP",(function(){return d})),t.d(r,"EVENT_AUDIO_DOWN",(function(){return f})),t.d(r,"EVENT_MESSAGE",(function(){return p})),t.d(r,"EVENT_AUDIO_LOADING",(function(){return m})),t.d(r,"EVENT_AUDIO_LOADED",(function(){return b})),t.d(r,"EVENT_DATA_LOADING",(function(){return h})),t.d(r,"EVENT_DATA_LOADED",(function(){return v})),t.d(r,"EVENT_TONIC_CHANGE",(function(){return g})),t.d(r,"EVENT_SCALE_CHANGE",(function(){return E})),t.d(r,"EVENT_ENDPOINT_CHANGE",(function(){return y}));var o={};t.r(o),t.d(o,"fetchData",(function(){return A})),t.d(o,"fetchInterval",(function(){return w}));var i={};t.r(i),t.d(i,"fetchData",(function(){return L})),t.d(i,"fetchInterval",(function(){return x}));var a={};t.r(a),t.d(a,"fetchData",(function(){return j})),t.d(a,"fetchInterval",(function(){return C}));t(8);const c="play",s="pause",l="reset",u="playback",d="audio-up",f="audio-down",m="audio-loading",b="audio-loaded",p="message",h="data-loading",v="data-loaded",g="tonic-change",E="scale-change",y="endpoint-change",w=6e5,A=()=>fetch("https://en.wikipedia.org/w/api.php?action=query&list=recentchanges&rcprop=title|sizes|flags|timestamp&rctype=edit&rclimit=500&origin=*&format=json").then(e=>e.json()).then(e=>e.query.recentchanges.map(e=>({title:`${e.title} (${new Date(e.timestamp).toLocaleDateString()}) ~ ${Math.abs(e.oldlen-e.newlen)}`,value:Math.log(Math.abs(e.oldlen-e.newlen)),start:new Date(e.timestamp).getTime()/1e3,end:new Date(e.timestamp).getTime()/1e3})).filter(e=>e.value>0)),x=18e5,L=()=>fetch("https://hacker-news.firebaseio.com/v0/newstories.json").then(e=>e.json()).then(e=>Promise.all(e.map(e=>fetch("https://hacker-news.firebaseio.com/v0/item/{0}.json".replace("{0}",e)).then(e=>e.json())))).then(e=>e.filter(e=>e&&e.score).map(e=>({title:`${e.title} (${new Date(1e3*e.time).toLocaleDateString()}) ~ ${e.score}`,value:Math.log(e.score),start:e.time,end:e.time}))),C=18e5,j=()=>fetch("https://hacker-news.firebaseio.com/v0/topstories.json").then(e=>e.json()).then(e=>Promise.all(e.map(e=>fetch("https://hacker-news.firebaseio.com/v0/item/{0}.json".replace("{0}",e)).then(e=>e.json())))).then(e=>e.filter(e=>e&&e.score).map(e=>({title:`${e.title} (${new Date(1e3*e.time).toLocaleDateString()}) ~ ${e.score}`,value:Math.log(e.score),start:e.time,end:e.time})));var P={"Wikipedia - Recent changes":o,"Hacker News - New stories":i,"Hacker News - Top stories":a},M=t(3),T=t.n(M);const k=["C","D","E","F","G","A","B"],S=T.a.names(),N={waveform:void 0},O=e=>{const{Waveform:n,Master:t}=e;let r=localStorage.getItem("tonic")||k[0],o=localStorage.getItem("scale")||S[0],i=[],a=0,c=void 0;const s=new n(4096),l=(({Freeverb:e})=>new e(.8,9e3))(e),d=(({Volume:e})=>new e(-10))(e),f=(({Compressor:e})=>new e(-5,16))(e),m=(({Compressor:e})=>new e(-15,8))(e),b=(({Channel:e})=>new e(-20))(e).chain(m,f,l,s,d,t),p=(({PolySynth:e,Synth:n})=>new e(64,n,{oscillator:{type:"triangle"},envelope:{attack:1.5,decay:3,sustain:.05,release:2}}))(e).connect(b),h=()=>{if(clearTimeout(c),0===i.length)return void(c=setTimeout(h,2));const e=i.reduce((e,n)=>Math.min(e,n.value),1/0),n=i.reduce((e,n)=>Math.max(e,n.value),-1/0),t=i[a],s=t.value,l=((e,n)=>{const t=new T.a(e,n);return Array.from(Array(4).keys()).flatMap(e=>t.map(n=>`${n}${3+e}`))})(o,r),d=l[Math.round((s-e)*(l.length-1)/(n-e))],f=i.reduce((e,n)=>Math.min(e,n.start),1/0),m=i.reduce((e,n)=>Math.max(e,n.end),-1/0),b=.5*i.length/(m-f),v=(t.end-t.start)*b;p.triggerAttackRelease(d,Math.max(Math.min(v,4),2)),document.dispatchEvent(new CustomEvent(u,{detail:{title:t.title,pitch:d,playbackIndex:a}})),a=(a+1)%i.length;const g=i[a];c=setTimeout(h,(g.start-t.start>=0?g.start-t.start:t.end-t.start)*(1e3*b))},v=()=>{a=0};return Promise.resolve({waveform:s,onPlay:()=>{h()},onPause:()=>{p.releaseAll(),clearTimeout(c)},onReset:v,onLoadData:(e=[])=>{i=[...e].sort((e,n)=>e.start-n.start),v()},onTonicChange:e=>{r=e},onScaleChange:e=>{o=e}})},D=()=>(document.dispatchEvent(new Event(m)),t.e(1).then(t.t.bind(null,27,7)).then(O).then(({waveform:e,...n})=>{const{onPlay:t,onPause:r,onReset:o,onLoadData:i,onTonicChange:a,onScaleChange:u}=n;document.addEventListener(c,t),document.addEventListener(s,r),document.addEventListener(l,o),document.addEventListener(v,({detail:e})=>i(e)),document.addEventListener(g,({detail:e})=>a(e)),document.addEventListener(E,({detail:e})=>u(e)),N.waveform=e,document.dispatchEvent(new Event(b)),document.dispatchEvent(new Event(d))}).catch(e=>{throw document.dispatchEvent(new Event(f)),document.dispatchEvent(new Event(b)),e})),_=()=>{const e=document.createElement("select");e.classList.add("selector"),e.classList.add("endpoint-selector"),e.id="endpoint_selector",Object.keys(P).forEach(n=>{const t=document.createElement("option");t.value=n,t.textContent=n,localStorage.getItem("endpoint")===n&&(t.selected=!0),e.appendChild(t)}),e.addEventListener("change",e=>{document.dispatchEvent(new CustomEvent(y,{detail:e.target.value})),localStorage.setItem("endpoint",e.target.value)});const n=document.createElement("div");n.classList.add("endpoint-selector-container");const t=document.createElement("label");return t.textContent="Source:",t.htmlFor="endpoint_selector",n.appendChild(t),n.appendChild(e),Promise.resolve(n)},I=()=>{const e=document.createElement("select");return e.classList.add("selector"),e.classList.add("tonic-selector"),k.forEach(n=>{const t=document.createElement("option");t.value=n,t.textContent=n,localStorage.getItem("tonic")===n&&(t.selected=!0),e.appendChild(t)}),e.addEventListener("change",e=>{document.dispatchEvent(new CustomEvent(g,{detail:e.target.value})),localStorage.setItem("tonic",e.target.value)}),Promise.resolve(e)},z=()=>{const e=document.createElement("select");return e.classList.add("selector"),e.classList.add("scale-selector"),S.forEach(n=>{const t=document.createElement("option");t.value=n,t.textContent=n,localStorage.getItem("scale")===n&&(t.selected=!0),e.appendChild(t)}),e.addEventListener("change",e=>{document.dispatchEvent(new CustomEvent(E,{detail:e.target.value})),localStorage.setItem("scale",e.target.value)}),Promise.resolve(e)},V=()=>{const e=document.createElement("button");return e.textContent="Play",e.classList.add("btn-audio"),e.classList.add("paused"),e.disabled=!0,e.addEventListener("click",()=>document.dispatchEvent(new Event(e.classList.contains("paused")?c:s))),document.addEventListener(c,()=>{e.classList.remove("paused"),e.textContent="Pause"}),document.addEventListener(s,()=>{e.classList.add("paused"),e.textContent="Play"}),document.addEventListener(d,()=>{e.disabled=!1}),document.addEventListener(f,()=>{e.disabled=!0}),Promise.resolve(e)},R=()=>{const e=document.createElement("button");return e.textContent="Reset",e.classList.add("btn-reset"),e.disabled=!0,e.addEventListener("click",()=>{e.disabled=!0,document.dispatchEvent(new Event(l))}),document.addEventListener(u,({detail:{playbackIndex:n}})=>{e.disabled=0===n}),Promise.resolve(e)},$=()=>{const e=document.createElement("div");e.textContent="Loading...",e.classList.add("loader");const n=()=>{const n=Array.from(e.classList).filter(e=>e.startsWith("loading-")).map(e=>e.replace("loading-",""));e.textContent=`Loading ${n.join(", ")}...`};return document.addEventListener(m,()=>{e.classList.add("loading-audio"),n()}),document.addEventListener(b,()=>{e.classList.remove("loading-audio"),n()}),document.addEventListener(h,()=>{e.classList.add("loading-data"),n()}),document.addEventListener(v,()=>{e.classList.remove("loading-data"),n()}),Promise.resolve(e)},U=()=>{const e=document.createElement("div");return e.classList.add("message"),document.addEventListener(p,({detail:n})=>{e.classList.add("visible"),e.textContent=n}),e.addEventListener("click",()=>{e.classList.remove("visible"),e.textContent=void 0}),Promise.resolve(e)},B=()=>{const e=document.createElement("div");return e.classList.add("playlist"),document.addEventListener(u,({detail:{title:n}})=>{const t=document.createElement("div");for(t.classList.add("playlist-item"),t.textContent=n,e.prepend(t);e.childElementCount>10;)e.removeChild(e.lastChild)}),Promise.resolve(e)},G=()=>{const e=document.createElement("canvas");e.classList.add("visualizer"),e.width=window.innerWidth,e.height=window.innerHeight,window.addEventListener("resize",()=>{e.width=window.innerWidth,e.height=window.innerHeight});const n=()=>{const t=N.waveform&&N.waveform.getValue();if(!t)return requestAnimationFrame(n);const r=e.getContext("2d"),{width:o,height:i}=e;r.clearRect(0,0,o,i),r.fillStyle="#00dddd",r.lineCap="round",r.beginPath(),r.moveTo(0,i);for(let e=0;e<t.length;e++){const n=e*o/t.length,a=(t[e]+1)*(i/2);r.lineTo(n,a)}r.lineTo(o,i),r.lineTo(0,i),r.fill(),requestAnimationFrame(n)};return n(),Promise.resolve(e)};window.DEBUG&&Object.values(r).forEach(e=>document.addEventListener(e,n=>console.info(e,...n.detail?[n.detail]:[]))),Promise.all([G(),_(),I(),z(),V(),R(),U(),$(),B()]).then(e=>(e=>(Object.values(e).forEach(e=>document.body.appendChild(e)),Promise.resolve(!0)))(e)).then(()=>D()).then(()=>(()=>{let e=void 0;const n=t=>(clearTimeout(e),t.fetchData().then(e=>document.dispatchEvent(new CustomEvent(v,{detail:e}))).then(()=>{t.fetchInterval&&(e=setTimeout(()=>n(t),t.fetchInterval))}).catch(e=>{throw document.dispatchEvent(new Event(v)),e}));document.addEventListener(y,({detail:e})=>{const t=P[e];document.dispatchEvent(new Event(h)),n(t).catch(e=>document.dispatchEvent(new CustomEvent(p,{detail:e.message})))});const t=localStorage.getItem("endpoint")||Object.keys(P).shift(),r=P[t];return document.dispatchEvent(new Event(h)),n(r)})()).catch(e=>{console.error(e),document.dispatchEvent(new CustomEvent(p,{detail:e.message}))})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,