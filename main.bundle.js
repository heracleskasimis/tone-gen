(()=>{var e,n,t={424:(e,n,t)=>{"use strict";t.d(n,{Z:()=>s});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([e.id,"html {\n  width: 100%;\n  height: 100%;\n  margin: none;\n  padding: none;\n  font-size: 16px;\n  font-family: sans-serif;\n  background-color: #ff0088;\n  color: #fff;\n}\n\n:focus { outline:none; }\n::-moz-focus-inner { border:0; }\n\nlabel {\n  font-weight: bold;\n}\n\n.loader, .message {\n  position: absolute;\n  top: 0;\n  left: 0;\n  text-align: center;\n  font-size: 2rem;\n  display: none;\n}\n\n.message {\n  top: 50vh;\n  left: 50vw;\n  transform: translate(-50%, -50%);\n  background-color: #000;\n  padding: 2rem 0;\n  cursor: pointer;\n  width: 100vw;\n}\n\n.loader {\n  background-color: #ff0088;\n  width: 100vw;\n  line-height: 100vh;\n}\n\n.loader.loading-data, .loader.loading-audio {\n  display: block;\n}\n\n.message.visible {\n  display: block;\n}\n\n.visualizer {\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: -1;\n  max-width: 100vw;\n  max-height: 100vh;\n}\n\n.controls {\n  position: absolute;\n  width: calc(100vw - 4rem);\n  bottom: 2rem;\n  left: 2rem;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n\n.endpoint-selector, .tonic-selector, .scale-selector, .speed-selector, .btn-audio, .btn-reset {\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n  font-weight: bold;\n  color: #fff;\n  font-size: 2rem;\n  line-height: 2rem;\n  border: none;\n  background-color: transparent;\n  padding: 0;\n}\n\n.tonic-selector, .scale-selector, .speed-selector {\n  font-size: 1.5rem;\n  text-align: right;\n  text-align-last: right;\n}\n\n.controls .speed-selector {\n  margin: auto;\n}\n\n.tonic-selector option, .scale-selector option, .speed-selector option {\n  color: #000;\n  font-size: 1rem;\n}\n\n.tonic-selector {\n  width: 2rem;\n}\n\nbutton {\n  height: 2rem;\n}\n\nbutton:disabled {\n  opacity: 0.6;\n}\n\n.btn-audio:before, .btn-reset:before {\n  font-size: 0.5em;\n  line-height: 2rem;\n  vertical-align: text-top;\n}\n\n.btn-audio:before, .btn-reset:before {\n  content: '\\2590\\A0\\258C';\n}\n\n.btn-audio.paused:before {\n  font-size: 1em;\n  content: '\\25BA';\n}\n\n.btn-reset {\n  font-size: 1rem;\n  line-height: 1rem;\n  height: 1.5rem;\n  margin-top: 0.75rem;\n  margin-left: 1rem;\n}\n\n.btn-reset:before {\n  line-height: 1rem;\n  font-size: 1.25em;\n  content: '\\21BB';\n}\n\n.endpoint-selector {\n  font-size: 1rem;\n}\n\n.playlist {\n  font-size: 0.8rem;\n  color: #ffffff;\n  font-weight: bold;\n  max-height: calc(50vh - 2rem);\n  overflow: hidden;\n}\n\n@media only screen and (max-width: 600px) {\n  .controls {\n    flex-direction: column;\n  }\n  .controls>* {\n    text-align: center;\n    text-align-last: center;\n    margin-right: auto;\n    margin-left: auto;\n  }\n}\n\n","",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,YAAY;EACZ,YAAY;EACZ,aAAa;EACb,eAAe;EACf,uBAAuB;EACvB,yBAAyB;EACzB,WAAW;AACb;;AAEA,SAAS,YAAY,EAAE;AACvB,qBAAqB,QAAQ,EAAE;;AAE/B;EACE,iBAAiB;AACnB;;AAEA;EACE,kBAAkB;EAClB,MAAM;EACN,OAAO;EACP,kBAAkB;EAClB,eAAe;EACf,aAAa;AACf;;AAEA;EACE,SAAS;EACT,UAAU;EACV,gCAAgC;EAChC,sBAAsB;EACtB,eAAe;EACf,eAAe;EACf,YAAY;AACd;;AAEA;EACE,yBAAyB;EACzB,YAAY;EACZ,kBAAkB;AACpB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,kBAAkB;EAClB,MAAM;EACN,OAAO;EACP,WAAW;EACX,gBAAgB;EAChB,iBAAiB;AACnB;;AAEA;EACE,kBAAkB;EAClB,yBAAyB;EACzB,YAAY;EACZ,UAAU;EACV,aAAa;EACb,eAAe;EACf,uBAAuB;AACzB;;AAEA;EACE,wBAAwB;EACxB,qBAAqB;EACrB,gBAAgB;EAChB,iBAAiB;EACjB,WAAW;EACX,eAAe;EACf,iBAAiB;EACjB,YAAY;EACZ,6BAA6B;EAC7B,UAAU;AACZ;;AAEA;EACE,iBAAiB;EACjB,iBAAiB;EACjB,sBAAsB;AACxB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,WAAW;EACX,eAAe;AACjB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,gBAAgB;EAChB,iBAAiB;EACjB,wBAAwB;AAC1B;;AAEA;EACE,wBAAwB;AAC1B;;AAEA;EACE,cAAc;EACd,gBAAgB;AAClB;;AAEA;EACE,eAAe;EACf,iBAAiB;EACjB,cAAc;EACd,mBAAmB;EACnB,iBAAiB;AACnB;;AAEA;EACE,iBAAiB;EACjB,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,iBAAiB;EACjB,cAAc;EACd,iBAAiB;EACjB,6BAA6B;EAC7B,gBAAgB;AAClB;;AAEA;EACE;IACE,sBAAsB;EACxB;EACA;IACE,kBAAkB;IAClB,uBAAuB;IACvB,kBAAkB;IAClB,iBAAiB;EACnB;AACF",sourcesContent:["html {\n  width: 100%;\n  height: 100%;\n  margin: none;\n  padding: none;\n  font-size: 16px;\n  font-family: sans-serif;\n  background-color: #ff0088;\n  color: #fff;\n}\n\n:focus { outline:none; }\n::-moz-focus-inner { border:0; }\n\nlabel {\n  font-weight: bold;\n}\n\n.loader, .message {\n  position: absolute;\n  top: 0;\n  left: 0;\n  text-align: center;\n  font-size: 2rem;\n  display: none;\n}\n\n.message {\n  top: 50vh;\n  left: 50vw;\n  transform: translate(-50%, -50%);\n  background-color: #000;\n  padding: 2rem 0;\n  cursor: pointer;\n  width: 100vw;\n}\n\n.loader {\n  background-color: #ff0088;\n  width: 100vw;\n  line-height: 100vh;\n}\n\n.loader.loading-data, .loader.loading-audio {\n  display: block;\n}\n\n.message.visible {\n  display: block;\n}\n\n.visualizer {\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: -1;\n  max-width: 100vw;\n  max-height: 100vh;\n}\n\n.controls {\n  position: absolute;\n  width: calc(100vw - 4rem);\n  bottom: 2rem;\n  left: 2rem;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n\n.endpoint-selector, .tonic-selector, .scale-selector, .speed-selector, .btn-audio, .btn-reset {\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n  font-weight: bold;\n  color: #fff;\n  font-size: 2rem;\n  line-height: 2rem;\n  border: none;\n  background-color: transparent;\n  padding: 0;\n}\n\n.tonic-selector, .scale-selector, .speed-selector {\n  font-size: 1.5rem;\n  text-align: right;\n  text-align-last: right;\n}\n\n.controls .speed-selector {\n  margin: auto;\n}\n\n.tonic-selector option, .scale-selector option, .speed-selector option {\n  color: #000;\n  font-size: 1rem;\n}\n\n.tonic-selector {\n  width: 2rem;\n}\n\nbutton {\n  height: 2rem;\n}\n\nbutton:disabled {\n  opacity: 0.6;\n}\n\n.btn-audio:before, .btn-reset:before {\n  font-size: 0.5em;\n  line-height: 2rem;\n  vertical-align: text-top;\n}\n\n.btn-audio:before, .btn-reset:before {\n  content: '\\2590\\A0\\258C';\n}\n\n.btn-audio.paused:before {\n  font-size: 1em;\n  content: '\\25BA';\n}\n\n.btn-reset {\n  font-size: 1rem;\n  line-height: 1rem;\n  height: 1.5rem;\n  margin-top: 0.75rem;\n  margin-left: 1rem;\n}\n\n.btn-reset:before {\n  line-height: 1rem;\n  font-size: 1.25em;\n  content: '\\21BB';\n}\n\n.endpoint-selector {\n  font-size: 1rem;\n}\n\n.playlist {\n  font-size: 0.8rem;\n  color: #ffffff;\n  font-weight: bold;\n  max-height: calc(50vh - 2rem);\n  overflow: hidden;\n}\n\n@media only screen and (max-width: 600px) {\n  .controls {\n    flex-direction: column;\n  }\n  .controls>* {\n    text-align: center;\n    text-align-last: center;\n    margin-right: auto;\n    margin-left: auto;\n  }\n}\n\n"],sourceRoot:""}]);const s=i},645:e=>{"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);r&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),n.push(d))}},n}},537:e=>{"use strict";e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([a]).join("\n")}return[n].join("\n")}},202:(e,n,t)=>{"use strict";var r=t(785),o=t(841),a=/\s*\|\s*|\s*,\s*|\s+/;function i(e){return s(e)?e:"string"==typeof e?e.trim().split(a):null==e?[]:[e]}var s=Array.isArray;function c(e){return s(e)?o(e):e}function l(e){return e}function d(e,n){return arguments.length>1?d(e)(n):function(n){var t=i(n);if(!1===e)return t;if(null===e)e=l;else if("function"!=typeof e)throw Error("Invalid function");if(s(t[0]))return e(t);var o=e(t.map(r));return s(o)?o.map(c):o}}var u={transform:d,split:d(!1),map:function e(n,t){return arguments.length>1?e(n)(t):d((function(e){return e.map(n)}))},reduce:function e(n,t,r){return 1===arguments.length?function(t,r){return e(n,t,r)}:arguments.length>2?e(n,t)(r):d((function(e){return e.reduce(n,t)}))},filter:function e(n,t){return arguments.length>1?e(n)(t):d((function(e){return e.filter(n)}))},rotate:function(e,n){var t=i(n),r=t.length,o=(e%r+r)%r;return t.slice(o,r).concat(t.slice(0,o))},select:function e(n,t){if(1===arguments.length)return function(t){return e(n,t)};var r=i(t);return i(n).map((function(e){return r[e-1]}))}};e.exports&&(e.exports=u),"undefined"!=typeof window&&(window.gamut=u)},238:e=>{"use strict";e.exports=function(e){return e<0?Array(1-e).join("b"):e>0?Array(e+1).join("#"):""}},168:e=>{"use strict";var n=[[0,0],[2,-1],[4,-2],[-1,1],[1,0],[3,-1],[5,-2]];e.exports=function(e,t,r,o){var a=n[e];t=t||0;var i=a[0]+7*t;if(void 0===r)return[i];var s=r+a[1]-4*t;return void 0===o?[i,s]:[i,s,o]}},441:e=>{"use strict";var n=[[3,1],[0,0],[4,0],[1,-1],[5,-1],[2,-2],[6,-2],[3,-3]];e.exports=function(e){if(!Array.isArray(e))return null;var t=(e[0]+1)%7;t<0&&(t=7+t);var r=n[t],o=Math.floor((e[0]+1)/7),a=1===e.length?null:e[1]-r[1]+4*o,i=e[2]||null;return[r[0],o,a,i]}},97:(e,n,t)=>{"use strict";var r=t(12),o=t(168),a=t(423),i={P:{dddd:-4,ddd:-3,dd:-2,d:-1,P:0,A:1,AA:2,AAA:3,AAAA:4},M:{ddd:-4,dd:-3,d:-2,m:-1,M:0,A:1,AA:2,AAA:3,AAAA:4}};e.exports=r((function(e){var n=a.exec(e);if(!n)return null;var t,r="-"===(n[2]||n[7])?-1:1,s=+(n[3]||n[8])-1,c=n[4]||n[6]||"",l=s%7;if(""===c)t=0;else if("#"===c[0])t=c.length;else if("b"===c[0])t=-c.length;else if(void 0===(t=i["PMMPPMM"[l]][c]))return null;var d=Math.floor(s/7),u=o(l,t,d);return 1===r?u:[-u[0],-u[1]]}))},423:e=>{e.exports=new RegExp("^(?:(([-+]?)(\\d+)(d{1,4}|m|M|P|A{1,4}|b{1,4}|#{1,4}|))|((AA|A|P|M|m|d|dd)([-+]?)(\\d+)))$")},765:(e,n,t)=>{"use strict";var r=t(441),o={};e.exports=function(e){if(!Array.isArray(e)||2!==e.length)return null;var n,t,s,c,l,d="|"+e[0]+"|"+e[1];return d in o?o[d]:o[d]=(c=r(e),l=i[c[0]],c[2]<0?(n=-1,t=8-c[0]-7*(c[2]+1),s="P"===l?-c[1]:-(c[1]+1)):(n=1,t=c[0]+1+7*c[2],s=c[1]),n*t+a[l][4+s])};var a={P:["dddd","ddd","dd","d","P","A","AA","AAA","AAAA"],M:["ddd","dd","d","m","M","A","AA","AAA","AAAA"]},i="PMMPPMM"},12:e=>{"use strict";e.exports=function(e){var n={};return function(t){return"string"!=typeof t?null:t in n?n[t]:n[t]=e(t)}}},232:(e,n,t)=>{"use strict";var r=t(12),o=t(655),a={C:[0,0],D:[2,-1],E:[4,-2],F:[-1,1],G:[1,0],A:[3,-1],B:[5,-2]};e.exports=r((function(e){var n=o.exec(e);if(!n||n[5])return null;var t=a[n[1].toUpperCase()],r=n[2].replace(/x/g,"##").length;"b"===n[2][0]&&(r*=-1);var i=t[0]+7*r;return n[3]?[i,+n[3]+t[1]-4*r,n[4]?+n[4].substring(1):null]:[i]}))},655:e=>{"use strict";e.exports=/^([a-gA-G])(#{1,}|b{1,}|x{1,}|)(-?\d*)(\/\d+|)\s*(.*)\s*$/},891:(e,n,t)=>{"use strict";var r=t(441),o=t(238),a={};e.exports=function(e){if(!Array.isArray(e)||e.length<1||2===e.length)return null;var n,t="|"+e[0]+"|"+e[1]+"|"+e[2];return t in a?a[t]:a[t]=(n=r(e),i[n[0]]+o(n[1])+(null!==n[2]?n[2]:"")+(null!==n[3]?"/"+n[3]:""))};var i=["C","D","E","F","G","A","B"]},809:e=>{"use strict";function n(e,n){return 1===n?e:function(n,t){return 1===arguments.length?function(t){return e(n,t)}:e(n,t)}}e.exports=function e(t,r,o){return 2===arguments.length?function(n){return e(t,r,n)}:n((function(e,n){var a=t(e),i=t(n);if(!a&&!i)return o(e,n);var s=o(a||e,i||n);return r(s)||s}),o.length)}},785:(e,n,t)=>{var r=t(232),o=t(97);e.exports=function(e){return r(e)||o(e)}},841:(e,n,t)=>{var r=t(891),o=t(765);e.exports=function(e){return r(e)||o(e)}},954:(e,n,t)=>{"use strict";var r=t(122),o=t(815),a=t(488),i=t(655);function s(e,n){if(1===arguments.lenght)return function(n){return s(e,n)};var t=a[e];return"string"==typeof t&&(t=a[t]),t||(t=r(e)),o(t,n)}s.get=function(e){var n=i.exec(e);return n&&n[5]?s(n[5],n[1]+n[2]+n[3]):[]},s.names=function(e){return e?Object.keys(a):Object.keys(a).reduce((function(e,n){return"string"!=typeof a[n]&&e.push(n),e}),[])},e.exports=s},815:(e,n,t)=>{"use strict";var r=t(785),o=t(202),a=t(316),i=t(638);function s(e,n){return 1===arguments.length?function(n){return s(e,n)}:o.transform((function(e){if(null===n)return e;var t=e[0],o=e.map(a(t));return!1===n?o:(n=r(n),o.map(i(n)))}),e)}e.exports&&(e.exports=s),"undefined"!=typeof window&&(window.harmonize=s)},316:(e,n,t)=>{var r=t(785),o=t(841),a=t(809)(r,o);e.exports=a((function(e,n){if(!Array.isArray(e)||!Array.isArray(n))return null;if(1===e.length||1===n.length){var t=n[0]-e[0];return[t,-Math.floor(7*t/12)]}return[n[0]-e[0],n[1]-e[1]]}))},638:(e,n,t)=>{var r=t(785),o=t(841),a=t(809)(r,o)((function(e,n){if(!1===e)return n;if(!Array.isArray(e)||!Array.isArray(n))return null;if(1===e.length||1===n.length)return[n[0]+e[0]];var t=2===e.length&&2===n.length?null:n[2]||e[2];return[n[0]+e[0],n[1]+e[1],t]}));e.exports&&(e.exports=a),"undefined"!=typeof window&&(window.transpose=a)},122:(e,n,t)=>{"use strict";var r=t(202),o=t(508);function a(e){return 2===e.length?[e[0],-Math.floor(7*e[0]/12)]:[e[0]]}function i(e,n){return e[0]===n[0]}e.exports=function(e){return r.transform((function(e){if(0===e.length)return[];var n,t,s=function(e){var n=o(!0,e);return n.reduce((function(e,t,r){return 0!==r&&i(n[r-1],t)||e.push(t),e}),[])}(e.map(a));return 2!==s[0].length&&(n=e[0],t=s,s=r.rotate(function(e,n){for(var t=0,r=n.length;t<r;t++)if(i(e,n[t]))return t}(n,t),t)),s}))(e)}},508:(e,n,t)=>{"use strict";var r=t(202).transform;function o(e,n){return i(e)-i(n)}function a(e,n){return-o(e,n)}function i(e){if(!e)return-1/0;var n=7*e[0];return n+12*(e[1]||0===e[1]?e[1]:-Math.floor(n/12)-10)}e.exports=function e(n,t){return arguments.length>1?e(n)(t):(null===n||!0===n?n=o:!1===n&&(n=a),r((function(e){return e.sort(n)})))}},488:(e,n,t)=>{"use strict";var r=t(223);e.exports=Object.keys(r).reduce((function(e,n){return e[n]=r[n][0].split(" "),r[n][1]&&r[n][1].forEach((function(t){e[t]=n})),e}),{})},379:e=>{"use strict";var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var a={},i=[],s=0;s<e.length;s++){var c=e[s],l=r.base?c[0]+r.base:c[0],d=a[l]||0,u="".concat(l," ").concat(d);a[l]=d+1;var A=t(u),m={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==A)n[A].references++,n[A].updater(m);else{var p=o(m,r);r.byIndex=s,n.splice(s,0,{identifier:u,updater:p,references:1})}i.push(u)}return i}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var s=t(a[i]);n[s].references--}for(var c=r(e,o),l=0;l<a.length;l++){var d=t(a[l]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}a=c}}},569:e=>{"use strict";var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{"use strict";e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{"use strict";e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{"use strict";e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{"use strict";e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},223:e=>{"use strict";e.exports=JSON.parse('{"lydian":["1 2 3 4# 5 6 7"],"major":["1 2 3 4 5 6 7",["ionian"]],"mixolydian":["1 2 3 4 5 6 7b",["dominant"]],"dorian":["1 2 3b 4 5 6 7b"],"aeolian":["1 2 3b 4 5 6b 7b",["minor"]],"phrygian":["1 2b 3b 4 5 6b 7b"],"locrian":["1 2b 3b 4 5b 6b 7b"],"melodic minor":["1 2 3b 4 5 6 7"],"melodic minor second mode":["1 2b 3b 4 5 6 7b"],"lydian augmented":["1 2 3 4# 5A 6 7"],"lydian dominant":["1 2 3 4# 5 6 7b",["lydian b7"]],"melodic minor fifth mode":["1 2 3 4 5 6b 7b",["hindu","mixolydian b6"]],"locrian #2":["1 2 3b 4 5b 6b 7b"],"locrian major":["1 2 3 4 5b 6b 7b",["arabian"]],"altered":["1 2b 3b 3 5b 6b 7b",["super locrian","diminished whole tone","pomeroy"]],"major pentatonic":["1 2 3 5 6",["pentatonic"]],"lydian pentatonic":["1 3 4# 5 7",["chinese"]],"mixolydian pentatonic":["1 3 4 5 7b",["indian"]],"locrian pentatonic":["1 3b 4 5b 7b",["minor seven flat five pentatonic"]],"minor pentatonic":["1 3b 4 5 7b"],"minor six pentatonic":["1 3b 4 5 6"],"minor hexatonic":["1 2 3b 4 5 7"],"flat three pentatonic":["1 2 3b 5 6",["kumoi"]],"flat six pentatonic":["1 2 3 5 6b"],"major flat two pentatonic":["1 2b 3 5 6"],"whole tone pentatonic":["1 3 5b 6b 7b"],"ionian pentatonic":["1 3 4 5 7"],"lydian #5 pentatonic":["1 3 4# 5A 7"],"lydian dominant pentatonic":["1 3 4# 5 7b"],"minor #7 pentatonic":["1 3b 4 5 7"],"super locrian pentatonic":["1 3b 4d 5b 7b"],"in-sen":["1 2b 4 5 7b"],"iwato":["1 2b 4 5b 7b"],"hirajoshi":["1 2 3b 5 6b"],"kumoijoshi":["1 2b 4 5 6b"],"pelog":["1 2b 3b 5 6b"],"vietnamese 1":["1 3b 4 5 6b"],"vietnamese 2":["1 3b 4 5 7b"],"prometheus":["1 2 3 4# 6 7b"],"prometheus neopolitan":["1 2b 3 4# 6 7b"],"ritusen":["1 2 4 5 6"],"scriabin":["1 2b 3 5 6"],"piongio":["1 2 4 5 6 7b"],"major blues":["1 2 3b 3 5 6"],"minor blues":["1 3b 4 5b 5 7b",["blues"]],"composite blues":["1 2 3b 3 4 5b 5 6 7b"],"augmented":["1 2A 3 5 5A 7"],"augmented heptatonic":["1 2A 3 4 5 5A 7"],"dorian #4":["1 2 3b 4# 5 6 7b"],"lydian diminished":["1 2 3b 4# 5 6 7"],"whole tone":["1 2 3 4# 5A 7b"],"leading whole tone":["1 2 3 4# 5A 7b 7"],"harmonic minor":["1 2 3b 4 5 6b 7"],"lydian minor":["1 2 3 4# 5 6b 7b"],"neopolitan":["1 2b 3b 4 5 6b 7"],"neopolitan minor":["1 2b 3b 4 5 6b 7b"],"neopolitan major":["1 2b 3b 4 5 6 7",["dorian b2"]],"neopolitan major pentatonic":["1 3 4 5b 7b"],"romanian minor":["1 2 3b 5b 5 6 7b"],"double harmonic lydian":["1 2b 3 4# 5 6b 7"],"diminished":["1 2 3b 4 5b 6b 6 7"],"harmonic major":["1 2 3 4 5 6b 7"],"double harmonic major":["1 2b 3 4 5 6b 7",["gypsy"]],"egyptian":["1 2 4 5 7b"],"hungarian minor":["1 2 3b 4# 5 6b 7"],"hungarian major":["1 2A 3 4# 5 6 7b"],"oriental":["1 2b 3 4 5b 6 7b"],"spanish":["1 2b 3 4 5 6b 7b",["phrygian major"]],"spanish heptatonic":["1 2b 3b 3 4 5 6b 7b"],"flamenco":["1 2b 3b 3 4# 5 7b"],"balinese":["1 2b 3b 4 5 6b 7"],"todi raga":["1 2b 3b 4# 5 6b 7"],"malkos raga":["1 3b 4 6b 7b"],"kafi raga":["1 3b 3 4 5 6 7b 7"],"purvi raga":["1 2b 3 4 4# 5 6b 7"],"persian":["1 2b 3 4 5b 6b 7"],"bebop":["1 2 3 4 5 6 7b 7"],"bebop dominant":["1 2 3 4 5 6 7b 7"],"bebop minor":["1 2 3b 3 4 5 6 7b"],"bebop major":["1 2 3 4 5 5A 6 7"],"bebop locrian":["1 2b 3b 4 5b 5 6b 7b"],"minor bebop":["1 2 3b 4 5 6b 7b 7"],"mystery #1":["1 2b 3 5b 6b 7b"],"enigmatic":["1 2b 3 5b 6b 7b 7"],"minor six diminished":["1 2 3b 4 5 6b 6 7"],"ionian augmented":["1 2 3 4 5A 6 7"],"lydian #9":["1 2b 3 4# 5 6 7"],"ichikosucho":["1 2 3 4 5b 5 6 7"],"six tone symmetric":["1 2b 3 4 5A 6"]}')}},r={};function o(e){var n=r[e];if(void 0!==n)return n.exports;var a=r[e]={id:e,exports:{}};return t[e].call(a.exports,a,a.exports,o),a.exports}o.m=t,o.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return o.d(n,{a:n}),n},o.d=(e,n)=>{for(var t in n)o.o(n,t)&&!o.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},o.f={},o.e=e=>Promise.all(Object.keys(o.f).reduce(((n,t)=>(o.f[t](e,n),n)),[])),o.u=e=>"tone.bundle.js",o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),e={},n="tone-gen:",o.l=(t,r,a,i)=>{if(e[t])e[t].push(r);else{var s,c;if(void 0!==a)for(var l=document.getElementsByTagName("script"),d=0;d<l.length;d++){var u=l[d];if(u.getAttribute("src")==t||u.getAttribute("data-webpack")==n+a){s=u;break}}s||(c=!0,(s=document.createElement("script")).charset="utf-8",s.timeout=120,o.nc&&s.setAttribute("nonce",o.nc),s.setAttribute("data-webpack",n+a),s.src=t),e[t]=[r];var A=(n,r)=>{s.onerror=s.onload=null,clearTimeout(m);var o=e[t];if(delete e[t],s.parentNode&&s.parentNode.removeChild(s),o&&o.forEach((e=>e(r))),n)return n(r)},m=setTimeout(A.bind(null,void 0,{type:"timeout",target:s}),12e4);s.onerror=A.bind(null,s.onerror),s.onload=A.bind(null,s.onload),c&&document.head.appendChild(s)}},o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;o.g.importScripts&&(e=o.g.location+"");var n=o.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var t=n.getElementsByTagName("script");t.length&&(e=t[t.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=e})(),(()=>{var e={179:0};o.f.j=(n,t)=>{var r=o.o(e,n)?e[n]:void 0;if(0!==r)if(r)t.push(r[2]);else{var a=new Promise(((t,o)=>r=e[n]=[t,o]));t.push(r[2]=a);var i=o.p+o.u(n),s=new Error;o.l(i,(t=>{if(o.o(e,n)&&(0!==(r=e[n])&&(e[n]=void 0),r)){var a=t&&("load"===t.type?"missing":t.type),i=t&&t.target&&t.target.src;s.message="Loading chunk "+n+" failed.\n("+a+": "+i+")",s.name="ChunkLoadError",s.type=a,s.request=i,r[1](s)}}),"chunk-"+n,n)}};var n=(n,t)=>{var r,a,[i,s,c]=t,l=0;if(i.some((n=>0!==e[n]))){for(r in s)o.o(s,r)&&(o.m[r]=s[r]);c&&c(o)}for(n&&n(t);l<i.length;l++)a=i[l],o.o(e,a)&&e[a]&&e[a][0](),e[a]=0},t=self.webpackChunktone_gen=self.webpackChunktone_gen||[];t.forEach(n.bind(null,0)),t.push=n.bind(null,t.push.bind(t))})(),(()=>{"use strict";var e={};o.r(e),o.d(e,{EVENT_AUDIO_DOWN:()=>y,EVENT_AUDIO_LOADED:()=>L,EVENT_AUDIO_LOADING:()=>x,EVENT_AUDIO_UP:()=>B,EVENT_DATA_LOADED:()=>P,EVENT_DATA_LOADING:()=>j,EVENT_ENDPOINT_CHANGE:()=>S,EVENT_MESSAGE:()=>k,EVENT_PAUSE:()=>g,EVENT_PLAY:()=>E,EVENT_PLAYBACK:()=>w,EVENT_RESET:()=>C,EVENT_SCALE_CHANGE:()=>M,EVENT_SPEED_CHANGE:()=>I,EVENT_TONIC_CHANGE:()=>T});var n={};o.r(n),o.d(n,{fetchData:()=>z,fetchInterval:()=>N});var t={};o.r(t),o.d(t,{fetchData:()=>_,fetchInterval:()=>D});var r={};o.r(r),o.d(r,{fetchData:()=>Y,fetchInterval:()=>O});var a=o(379),i=o.n(a),s=o(795),c=o.n(s),l=o(569),d=o.n(l),u=o(565),A=o.n(u),m=o(216),p=o.n(m),f=o(589),h=o.n(f),b=o(424),v={};v.styleTagTransform=h(),v.setAttributes=A(),v.insert=d().bind(null,"head"),v.domAPI=c(),v.insertStyleElement=p(),i()(b.Z,v),b.Z&&b.Z.locals&&b.Z.locals;const E="play",g="pause",C="reset",w="playback",B="audio-up",y="audio-down",x="audio-loading",L="audio-loaded",k="message",j="data-loading",P="data-loaded",T="tonic-change",M="scale-change",S="endpoint-change",I="speed-change",N=6e5,z=()=>fetch("https://en.wikipedia.org/w/api.php?action=query&list=recentchanges&rcprop=title|sizes|flags|timestamp&rctype=edit&rclimit=500&origin=*&format=json").then((e=>e.json())).then((e=>e.query.recentchanges.map((e=>({title:`${e.title} (${new Date(e.timestamp).toLocaleDateString()}) ~ ${Math.abs(e.oldlen-e.newlen)}`,value:Math.log(Math.abs(e.oldlen-e.newlen)),start:new Date(e.timestamp).getTime()/1e3,end:new Date(e.timestamp).getTime()/1e3}))).filter((e=>e.value>0)))),D=18e5,_=()=>fetch("https://hacker-news.firebaseio.com/v0/newstories.json").then((e=>e.json())).then((e=>Promise.all(e.map((e=>fetch("https://hacker-news.firebaseio.com/v0/item/{0}.json".replace("{0}",e)).then((e=>e.json()))))))).then((e=>e.filter((e=>e&&e.score)).map((e=>({title:`${e.title} (${new Date(1e3*e.time).toLocaleDateString()}) ~ ${e.score}`,value:Math.log(e.score),start:e.time,end:e.time}))))),O=18e5,Y=()=>fetch("https://hacker-news.firebaseio.com/v0/topstories.json").then((e=>e.json())).then((e=>Promise.all(e.map((e=>fetch("https://hacker-news.firebaseio.com/v0/item/{0}.json".replace("{0}",e)).then((e=>e.json()))))))).then((e=>e.filter((e=>e&&e.score)).map((e=>({title:`${e.title} (${new Date(1e3*e.time).toLocaleDateString()}) ~ ${e.score}`,value:Math.log(e.score),start:e.time,end:e.time}))))),U={"Wikipedia - Recent changes":n,"Hacker News - New stories":t,"Hacker News - Top stories":r};var V=o(954),W=o.n(V);const $=["C","D","E","F","G","A","B"],R=W().names(),q={waveform:void 0},F=({PolySynth:e,Synth:n},t)=>new e(n,{oscillator:{type:"triangle"},envelope:{attack:.75*t,decay:1.5*t,sustain:.05,release:t}}),G=e=>{const{Waveform:n,Master:t}=e;let r,o=localStorage.getItem("tonic")||$[0],a=localStorage.getItem("scale")||R[0],i=[],s=0,c=4/(localStorage.getItem("speed")||1);const l=new n(4096),d=(({JCReverb:e})=>new e(.9))(e),u=(({JCReverb:e})=>new e(.95))(e),A=(({Volume:e})=>new e(-40))(e),m=(({Compressor:e})=>new e(-5,4))(e),p=(({MultibandCompressor:e})=>new e({low:{threshold:-20,ratio:2},mid:{threshold:-15,ratio:2},high:{threshold:-20,ratio:4},lowFrequency:300,highFrequency:4e3}))(e),f=(({Channel:e})=>new e)(e).chain(A,d,u,p,m,l,t);let h=F(e,c).connect(f);const b=()=>{if(clearTimeout(r),0===i.length)return void(r=setTimeout(b,c));const e=i.reduce(((e,n)=>Math.min(e,n.value)),1/0),n=i.reduce(((e,n)=>Math.max(e,n.value)),-1/0),t=i[s],l=t.value,d=((e,n)=>{const t=new(W())(e,n);return Array.from(Array(4).keys()).flatMap((e=>t.map((n=>`${n}${3+e}`))))})(a,o),u=d[Math.round((l-e)*(d.length-1)/(n-e))],A=i.reduce(((e,n)=>Math.min(e,n.start)),1/0),m=i.reduce(((e,n)=>Math.max(e,n.end)),-1/0),p=c*i.length/4/(m-A),f=(t.end-t.start)*p;h.triggerAttackRelease(u,Math.max(Math.min(f,c),2*c)),document.dispatchEvent(new CustomEvent(w,{detail:{title:t.title,pitch:u,playbackIndex:s}})),s=(s+1)%i.length;const v=i[s];r=setTimeout(b,(v.start-t.start>=0?v.start-t.start:t.end-t.start)*(1e3*p))},v=()=>{s=0};return Promise.resolve({waveform:l,onPlay:()=>{b()},onPause:()=>{h.releaseAll(),clearTimeout(r)},onReset:v,onLoadData:(e=[])=>{i=[...e].sort(((e,n)=>e.start-n.start)),v()},onTonicChange:e=>{o=e},onScaleChange:e=>{a=e},onSpeedChange:n=>{const t=h;t.releaseAll(),setTimeout((()=>t.dispose()),2e3*c),c=4/n,h=F(e,c).connect(f)}})},Z=()=>{const e=document.createElement("select");return e.classList.add("selector"),e.classList.add("tonic-selector"),$.forEach((n=>{const t=document.createElement("option");t.value=n,t.textContent=n,localStorage.getItem("tonic")===n&&(t.selected=!0),e.appendChild(t)})),e.addEventListener("change",(e=>{document.dispatchEvent(new CustomEvent(T,{detail:e.target.value})),localStorage.setItem("tonic",e.target.value)})),Promise.resolve(e)},H=()=>{const e=document.createElement("select");return e.classList.add("selector"),e.classList.add("scale-selector"),R.forEach((n=>{const t=document.createElement("option");t.value=n,t.textContent=n,localStorage.getItem("scale")===n&&(t.selected=!0),e.appendChild(t)})),e.addEventListener("change",(e=>{document.dispatchEvent(new CustomEvent(M,{detail:e.target.value})),localStorage.setItem("scale",e.target.value)})),Promise.resolve(e)},J=()=>{const e=document.createElement("select");return e.classList.add("selector"),e.classList.add("speed-selector"),[.5,1,2,4,8].forEach((n=>{const t=document.createElement("option");t.value=n,t.textContent=`x${n}`,(localStorage.getItem("speed")||1)==n&&(t.selected=!0),e.appendChild(t)})),e.addEventListener("change",(e=>{document.dispatchEvent(new CustomEvent(I,{detail:e.target.value})),localStorage.setItem("speed",e.target.value)})),Promise.resolve(e)},X=()=>{const e=document.createElement("button");return e.textContent="Play",e.classList.add("btn-audio"),e.classList.add("paused"),e.disabled=!0,e.addEventListener("click",(()=>document.dispatchEvent(new Event(e.classList.contains("paused")?E:g)))),document.addEventListener(E,(()=>{e.classList.remove("paused"),e.textContent="Pause"})),document.addEventListener(g,(()=>{e.classList.add("paused"),e.textContent="Play"})),document.addEventListener(B,(()=>{e.disabled=!1})),document.addEventListener(y,(()=>{e.disabled=!0})),Promise.resolve(e)},Q=()=>{const e=document.createElement("button");return e.textContent="Reset",e.classList.add("btn-reset"),e.disabled=!0,e.addEventListener("click",(()=>{e.disabled=!0,document.dispatchEvent(new Event(C))})),document.addEventListener(w,(({detail:{playbackIndex:n}})=>{e.disabled=0===n})),Promise.resolve(e)};window.DEBUG&&Object.values(e).forEach((e=>document.addEventListener(e,(n=>console.info(e,...n.detail?[n.detail]:[]))))),Promise.all([(()=>{const e=document.createElement("canvas");e.classList.add("visualizer"),e.width=window.innerWidth,e.height=window.innerHeight,window.addEventListener("resize",(()=>{e.width=window.innerWidth,e.height=window.innerHeight}));const n=()=>{const t=q.waveform&&q.waveform.getValue();if(!t)return requestAnimationFrame(n);const r=e.getContext("2d"),{width:o,height:a}=e;r.clearRect(0,0,o,a),r.fillStyle="#00dddd",r.lineCap="round",r.beginPath(),r.moveTo(0,a);for(let e=0;e<t.length;e++){const n=e*o/t.length,i=(t[e]+1)*(a/2);r.lineTo(n,i)}r.lineTo(o,a),r.lineTo(0,a),r.fill(),requestAnimationFrame(n)};return n(),Promise.resolve(e)})(),(()=>{const e=document.createElement("select");e.classList.add("selector"),e.classList.add("endpoint-selector"),e.id="endpoint_selector",Object.keys(U).forEach((n=>{const t=document.createElement("option");t.value=n,t.textContent=n,localStorage.getItem("endpoint")===n&&(t.selected=!0),e.appendChild(t)})),e.addEventListener("change",(e=>{document.dispatchEvent(new CustomEvent(S,{detail:e.target.value})),localStorage.setItem("endpoint",e.target.value)}));const n=document.createElement("div");n.classList.add("endpoint-selector-container");const t=document.createElement("label");return t.textContent="Source:",t.htmlFor="endpoint_selector",n.appendChild(t),n.appendChild(e),Promise.resolve(n)})(),(()=>{const e=document.createElement("div");return e.classList.add("controls"),Promise.all([X(),Q(),J(),H(),Z()]).then((n=>Object.values(n).forEach((n=>e.appendChild(n))))).then((()=>e))})(),(()=>{const e=document.createElement("div");return e.classList.add("message"),document.addEventListener(k,(({detail:n})=>{e.classList.add("visible"),e.textContent=n})),e.addEventListener("click",(()=>{e.classList.remove("visible"),e.textContent=void 0})),Promise.resolve(e)})(),(()=>{const e=document.createElement("div");e.textContent="Loading...",e.classList.add("loader");const n=()=>{const n=Array.from(e.classList).filter((e=>e.startsWith("loading-"))).map((e=>e.replace("loading-","")));e.textContent=`Loading ${n.join(", ")}...`};return document.addEventListener(x,(()=>{e.classList.add("loading-audio"),n()})),document.addEventListener(L,(()=>{e.classList.remove("loading-audio"),n()})),document.addEventListener(j,(()=>{e.classList.add("loading-data"),n()})),document.addEventListener(P,(()=>{e.classList.remove("loading-data"),n()})),Promise.resolve(e)})(),(()=>{const e=document.createElement("div");return e.classList.add("playlist"),document.addEventListener(w,(({detail:{title:n}})=>{const t=document.createElement("div");for(t.classList.add("playlist-item"),t.textContent=n,e.prepend(t);e.childElementCount>10;)e.removeChild(e.lastChild)})),Promise.resolve(e)})()]).then((e=>(e=>(Object.values(e).forEach((e=>document.body.appendChild(e))),Promise.resolve(!0)))(e))).then((()=>(document.dispatchEvent(new Event(x)),o.e(845).then(o.bind(o,497)).then(G).then((({waveform:e,...n})=>{const{onPlay:t,onPause:r,onReset:o,onLoadData:a,onTonicChange:i,onScaleChange:s,onSpeedChange:c}=n;document.addEventListener(E,t),document.addEventListener(g,r),document.addEventListener(C,o),document.addEventListener(P,(({detail:e})=>a(e))),document.addEventListener(T,(({detail:e})=>i(e))),document.addEventListener(M,(({detail:e})=>s(e))),document.addEventListener(I,(({detail:e})=>c(e))),q.waveform=e,document.dispatchEvent(new Event(L)),document.dispatchEvent(new Event(B))})).catch((e=>{throw document.dispatchEvent(new Event(y)),document.dispatchEvent(new Event(L)),e}))))).then((()=>(()=>{let e;const n=t=>(clearTimeout(e),t.fetchData().then((e=>document.dispatchEvent(new CustomEvent(P,{detail:e})))).then((()=>{t.fetchInterval&&(e=setTimeout((()=>n(t)),t.fetchInterval))})).catch((e=>{throw document.dispatchEvent(new Event(P)),e})));document.addEventListener(S,(({detail:e})=>{const t=U[e];document.dispatchEvent(new Event(j)),n(t).catch((e=>document.dispatchEvent(new CustomEvent(k,{detail:e.message}))))}));const t=localStorage.getItem("endpoint")||Object.keys(U).shift(),r=U[t];return document.dispatchEvent(new Event(j)),n(r)})())).catch((e=>{console.error(e),document.dispatchEvent(new CustomEvent(k,{detail:e.message}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,