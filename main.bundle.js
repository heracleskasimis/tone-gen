!function(n){function e(e){for(var t,o,i=e[0],a=e[1],c=0,u=[];c<i.length;c++)o=i[c],Object.prototype.hasOwnProperty.call(r,o)&&r[o]&&u.push(r[o][0]),r[o]=0;for(t in a)Object.prototype.hasOwnProperty.call(a,t)&&(n[t]=a[t]);for(s&&s(e);u.length;)u.shift()()}var t={},r={0:0};function o(e){if(t[e])return t[e].exports;var r=t[e]={i:e,l:!1,exports:{}};return n[e].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.e=function(n){var e=[],t=r[n];if(0!==t)if(t)e.push(t[2]);else{var i=new Promise((function(e,o){t=r[n]=[e,o]}));e.push(t[2]=i);var a,c=document.createElement("script");c.charset="utf-8",c.timeout=120,o.nc&&c.setAttribute("nonce",o.nc),c.src=function(n){return o.p+""+({1:"vendors~tone"}[n]||n)+".bundle.js"}(n);var s=new Error;a=function(e){c.onerror=c.onload=null,clearTimeout(u);var t=r[n];if(0!==t){if(t){var o=e&&("load"===e.type?"missing":e.type),i=e&&e.target&&e.target.src;s.message="Loading chunk "+n+" failed.\n("+o+": "+i+")",s.name="ChunkLoadError",s.type=o,s.request=i,t[1](s)}r[n]=void 0}};var u=setTimeout((function(){a({type:"timeout",target:c})}),12e4);c.onerror=c.onload=a,document.head.appendChild(c)}return Promise.all(e)},o.m=n,o.c=t,o.d=function(n,e,t){o.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},o.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},o.t=function(n,e){if(1&e&&(n=o(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(o.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var r in n)o.d(t,r,function(e){return n[e]}.bind(null,r));return t},o.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return o.d(e,"a",e),e},o.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},o.p="",o.oe=function(n){throw console.error(n),n};var i=window.webpackJsonp=window.webpackJsonp||[],a=i.push.bind(i);i.push=e,i=i.slice();for(var c=0;c<i.length;c++)e(i[c]);var s=a;o(o.s=26)}([function(n,e,t){var r=t(13),o=t(14);n.exports=function(n){return r(n)||o(n)}},function(n,e,t){"use strict";var r=t(0),o=t(2),i=/\s*\|\s*|\s*,\s*|\s+/;function a(n){return c(n)?n:"string"==typeof n?n.trim().split(i):null==n?[]:[n]}var c=Array.isArray;function s(n){return c(n)?o(n):n}function u(n){return n}function l(n,e){return arguments.length>1?l(n)(e):function(e){var t=a(e);if(!1===n)return t;if(null===n)n=u;else if("function"!=typeof n)throw Error("Invalid function");if(c(t[0]))return n(t);var o=n(t.map(r));return c(o)?o.map(s):o}}var d={transform:l,split:l(!1),map:function n(e,t){return arguments.length>1?n(e)(t):l((function(n){return n.map(e)}))},reduce:function n(e,t,r){return 1===arguments.length?function(t,r){return n(e,t,r)}:arguments.length>2?n(e,t)(r):l((function(n){return n.reduce(e,t)}))},filter:function n(e,t){return arguments.length>1?n(e)(t):l((function(n){return n.filter(e)}))},rotate:function(n,e){var t=a(e),r=t.length,o=(n%r+r)%r;return t.slice(o,r).concat(t.slice(0,o))},select:function n(e,t){if(1===arguments.length)return function(t){return n(e,t)};var r=a(t);return a(e).map((function(n){return r[n-1]}))}};n.exports&&(n.exports=d),"undefined"!=typeof window&&(window.gamut=d)},function(n,e,t){var r=t(17),o=t(19);n.exports=function(n){return r(n)||o(n)}},function(n,e,t){"use strict";var r=t(12),o=t(21),i=t(24),a=t(5);function c(n,e){if(1===arguments.lenght)return function(e){return c(n,e)};var t=i[n];return"string"==typeof t&&(t=i[t]),t||(t=r(n)),o(t,e)}c.get=function(n){var e=a.exec(n);return e&&e[5]?c(e[5],e[1]+e[2]+e[3]):[]},c.names=function(n){return n?Object.keys(i):Object.keys(i).reduce((function(n,e){return"string"!=typeof i[e]&&n.push(e),n}),[])},n.exports=c},function(n,e,t){"use strict";n.exports=function(n){var e={};return function(t){return"string"!=typeof t?null:t in e?e[t]:e[t]=n(t)}}},function(n,e,t){"use strict";n.exports=/^([a-gA-G])(#{1,}|b{1,}|x{1,}|)(-?\d*)(\/\d+|)\s*(.*)\s*$/},function(n,e,t){"use strict";var r=[[3,1],[0,0],[4,0],[1,-1],[5,-1],[2,-2],[6,-2],[3,-3]];n.exports=function(n){if(!Array.isArray(n))return null;var e=(n[0]+1)%7;e<0&&(e=7+e);var t=r[e],o=Math.floor((n[0]+1)/7),i=1===n.length?null:n[1]-t[1]+4*o,a=n[2]||null;return[t[0],o,i,a]}},function(n,e,t){"use strict";function r(n,e){return 1===e?n:function(e,t){return 1===arguments.length?function(t){return n(e,t)}:n(e,t)}}n.exports=function n(e,t,o){return 2===arguments.length?function(r){return n(e,t,r)}:r((function(n,r){var i=e(n),a=e(r);if(!i&&!a)return o(n,r);var c=o(i||n,a||r);return t(c)||c}),o.length)}},function(n,e,t){var r=t(9),o=t(10);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[n.i,o,""]]);var i={insert:"head",singleton:!1};r(o,i);n.exports=o.locals||{}},function(n,e,t){"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var n={};return function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}n[e]=t}return n[e]}}(),a=[];function c(n){for(var e=-1,t=0;t<a.length;t++)if(a[t].identifier===n){e=t;break}return e}function s(n,e){for(var t={},r=[],o=0;o<n.length;o++){var i=n[o],s=e.base?i[0]+e.base:i[0],u=t[s]||0,l="".concat(s," ").concat(u);t[s]=u+1;var d=c(l),f={css:i[1],media:i[2],sourceMap:i[3]};-1!==d?(a[d].references++,a[d].updater(f)):a.push({identifier:l,updater:h(f,e),references:1}),r.push(l)}return r}function u(n){var e=document.createElement("style"),r=n.attributes||{};if(void 0===r.nonce){var o=t.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(n){e.setAttribute(n,r[n])})),"function"==typeof n.insert)n.insert(e);else{var a=i(n.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(e)}return e}var l,d=(l=[],function(n,e){return l[n]=e,l.filter(Boolean).join("\n")});function f(n,e,t,r){var o=t?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(n.styleSheet)n.styleSheet.cssText=d(e,o);else{var i=document.createTextNode(o),a=n.childNodes;a[e]&&n.removeChild(a[e]),a.length?n.insertBefore(i,a[e]):n.appendChild(i)}}function b(n,e,t){var r=t.css,o=t.media,i=t.sourceMap;if(o?n.setAttribute("media",o):n.removeAttribute("media"),i&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleSheet)n.styleSheet.cssText=r;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(r))}}var m=null,p=0;function h(n,e){var t,r,o;if(e.singleton){var i=p++;t=m||(m=u(e)),r=f.bind(null,t,i,!1),o=f.bind(null,t,i,!0)}else t=u(e),r=b.bind(null,t,e),o=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)};return r(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;r(n=e)}else o()}}n.exports=function(n,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=o());var t=s(n=n||[],e);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var r=0;r<t.length;r++){var o=c(t[r]);a[o].references--}for(var i=s(n,e),u=0;u<t.length;u++){var l=c(t[u]);0===a[l].references&&(a[l].updater(),a.splice(l,1))}t=i}}}},function(n,e,t){(e=t(11)(!1)).push([n.i,"html {\n  width: 100%;\n  height: 100%;\n  margin: none;\n  padding: none;\n  font-size: 16px;\n  font-family: sans-serif;\n  background-color: #ff0088;\n}\n\n:focus { outline:none; }\n::-moz-focus-inner { border:0; }\n\n.loader, .message {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  text-align: center;\n  line-height: 100vh;\n  font-size: 2rem;\n  color: #fff;\n  background-color: #00dddd;\n  display: none;\n}\n\n.loader.loading-data, .loader.loading-audio {\n  display: block;\n}\n\n.message.visible {\n  display: block;\n}\n\n.visualizer {\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: -1;\n  max-width: 100vw;\n  max-height: 100vh;\n}\n\n.tonic-selector, .scale-selector, .btn-audio, .btn-reset {\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n  position: absolute;\n  bottom: 2rem;\n  font-weight: bold;\n  color: #fff;\n  font-size: 2rem;\n  line-height: 2rem;\n  border: none;\n  background-color: transparent;\n}\n\n.tonic-selector, .scale-selector {\n  font-size: 1.5rem;\n  text-align: right;\n  text-align-last: right;\n}\n\n.tonic-selector option, .scale-selector option {\n  color: #000;\n  font-size: 1rem;\n}\n\n.tonic-selector {\n  width: 2rem;\n  right: 2rem;\n}\n\n.scale-selector {\n  right: 4rem;\n}\n\nbutton {\n  height: 2rem;\n}\n\nbutton:disabled {\n  opacity: 0.6;\n}\n\n.btn-audio {\n  left: 2rem;\n}\n\n.btn-audio:before, .btn-reset:before {\n  font-size: 0.5em;\n  line-height: 2rem;\n  vertical-align: text-top;\n}\n\n.btn-audio:before, .btn-reset:before {\n  content: '\\2590\\A0\\258C';\n}\n\n.btn-audio.paused:before {\n  font-size: 1em;\n  content: '\\25BA';\n}\n\n.btn-reset {\n  left: 11rem;\n  font-size: 1rem;\n  line-height: 1rem;\n  height: 1.5rem;\n}\n\n.btn-reset:before {\n  line-height: 1rem;\n  font-size: 1.25em;\n  content: '\\21BB';\n}\n\n.playlist {\n  font-size: 0.8rem;\n  color: #00ffff;\n  font-weight: bold;\n}\n",""]),n.exports=e},function(n,e,t){"use strict";n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t=function(n,e){var t=n[1]||"",r=n[3];if(!r)return t;if(e&&"function"==typeof btoa){var o=(a=r,c=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),"/*# ".concat(s," */")),i=r.sources.map((function(n){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(n," */")}));return[t].concat(i).concat([o]).join("\n")}var a,c,s;return[t].join("\n")}(e,n);return e[2]?"@media ".concat(e[2]," {").concat(t,"}"):t})).join("")},e.i=function(n,t,r){"string"==typeof n&&(n=[[null,n,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var c=0;c<n.length;c++){var s=[].concat(n[c]);r&&o[s[0]]||(t&&(s[2]?s[2]="".concat(t," and ").concat(s[2]):s[2]=t),e.push(s))}},e}},function(n,e,t){"use strict";var r=t(1),o=t(20);function i(n){return 2===n.length?[n[0],-Math.floor(7*n[0]/12)]:[n[0]]}function a(n,e){return n[0]===e[0]}n.exports=function(n){return r.transform((function(n){if(0===n.length)return[];var e=function(n){var e=o(!0,n);return e.reduce((function(n,t,r){return 0!==r&&a(e[r-1],t)||n.push(t),n}),[])}(n.map(i));return 2!==e[0].length&&(e=function(n,e){return r.rotate(function(n,e){for(var t=0,r=e.length;t<r;t++)if(a(n,e[t]))return t}(n,e),e)}(n[0],e)),e}))(n)}},function(n,e,t){"use strict";var r=t(4),o=t(5),i={C:[0,0],D:[2,-1],E:[4,-2],F:[-1,1],G:[1,0],A:[3,-1],B:[5,-2]};n.exports=r((function(n){var e=o.exec(n);if(!e||e[5])return null;var t=i[e[1].toUpperCase()],r=e[2].replace(/x/g,"##").length;"b"===e[2][0]&&(r*=-1);var a=t[0]+7*r;return e[3]?[a,+e[3]+t[1]-4*r,e[4]?+e[4].substring(1):null]:[a]}))},function(n,e,t){"use strict";var r=t(4),o=t(15),i=t(16),a={P:{dddd:-4,ddd:-3,dd:-2,d:-1,P:0,A:1,AA:2,AAA:3,AAAA:4},M:{ddd:-4,dd:-3,d:-2,m:-1,M:0,A:1,AA:2,AAA:3,AAAA:4}};n.exports=r((function(n){var e=i.exec(n);if(!e)return null;var t,r="-"===(e[2]||e[7])?-1:1,c=+(e[3]||e[8])-1,s=e[4]||e[6]||"",u=c%7;if(""===s)t=0;else if("#"===s[0])t=s.length;else if("b"===s[0])t=-s.length;else if(void 0===(t=a["PMMPPMM"[u]][s]))return null;var l=Math.floor(c/7),d=o(u,t,l);return 1===r?d:[-d[0],-d[1]]}))},function(n,e,t){"use strict";var r=[[0,0],[2,-1],[4,-2],[-1,1],[1,0],[3,-1],[5,-2]];n.exports=function(n,e,t,o){var i=r[n];e=e||0;var a=i[0]+7*e;if(void 0===t)return[a];var c=t+i[1]-4*e;return void 0===o?[a,c]:[a,c,o]}},function(n,e){n.exports=new RegExp("^(?:(([-+]?)(\\d+)(d{1,4}|m|M|P|A{1,4}|b{1,4}|#{1,4}|))|((AA|A|P|M|m|d|dd)([-+]?)(\\d+)))$")},function(n,e,t){"use strict";var r=t(6),o=t(18),i={};n.exports=function(n){if(!Array.isArray(n)||n.length<1||2===n.length)return null;var e,t="|"+n[0]+"|"+n[1]+"|"+n[2];return t in i?i[t]:i[t]=(e=r(n),a[e[0]]+o(e[1])+(null!==e[2]?e[2]:"")+(null!==e[3]?"/"+e[3]:""))};var a=["C","D","E","F","G","A","B"]},function(n,e,t){"use strict";n.exports=function(n){return n<0?Array(1-n).join("b"):n>0?Array(n+1).join("#"):""}},function(n,e,t){"use strict";var r=t(6),o={};n.exports=function(n){if(!Array.isArray(n)||2!==n.length)return null;var e="|"+n[0]+"|"+n[1];return e in o?o[e]:o[e]=function(n){var e,t,o,a=r(n),c="PMMPPMM"[a[0]];a[2]<0?(e=-1,t=8-a[0]-7*(a[2]+1),o="P"===c?-a[1]:-(a[1]+1)):(e=1,t=a[0]+1+7*a[2],o=a[1]);var s=i[c][4+o];return e*t+s}(n)};var i={P:["dddd","ddd","dd","d","P","A","AA","AAA","AAAA"],M:["ddd","dd","d","m","M","A","AA","AAA","AAAA"]}},function(n,e,t){"use strict";var r=t(1).transform;function o(n,e){return a(n)-a(e)}function i(n,e){return-o(n,e)}function a(n){if(!n)return-1/0;var e=7*n[0];return e+12*(n[1]||0===n[1]?n[1]:-Math.floor(e/12)-10)}n.exports=function n(e,t){return arguments.length>1?n(e)(t):(null===e||!0===e?e=o:!1===e&&(e=i),r((function(n){return n.sort(e)})))}},function(n,e,t){"use strict";var r=t(0),o=t(1),i=t(22),a=t(23);function c(n,e){return 1===arguments.length?function(e){return c(n,e)}:o.transform((function(n){if(null===e)return n;var t=n[0],o=n.map(i(t));return!1===e?o:(e=r(e),o.map(a(e)))}),n)}n.exports&&(n.exports=c),"undefined"!=typeof window&&(window.harmonize=c)},function(n,e,t){var r=t(0),o=t(2),i=t(7)(r,o);n.exports=i((function(n,e){if(!Array.isArray(n)||!Array.isArray(e))return null;if(1===n.length||1===e.length){var t=e[0]-n[0];return[t,-Math.floor(7*t/12)]}return[e[0]-n[0],e[1]-n[1]]}))},function(n,e,t){var r=t(0),o=t(2),i=t(7)(r,o)((function(n,e){if(!1===n)return e;if(!Array.isArray(n)||!Array.isArray(e))return null;if(1===n.length||1===e.length)return[e[0]+n[0]];var t=2===n.length&&2===e.length?null:e[2]||n[2];return[e[0]+n[0],e[1]+n[1],t]}));n.exports&&(n.exports=i),"undefined"!=typeof window&&(window.transpose=i)},function(n,e,t){"use strict";var r=t(25);n.exports=Object.keys(r).reduce((function(n,e){return n[e]=r[e][0].split(" "),r[e][1]&&r[e][1].forEach((function(t){n[t]=e})),n}),{})},function(n){n.exports=JSON.parse('{"lydian":["1 2 3 4# 5 6 7"],"major":["1 2 3 4 5 6 7",["ionian"]],"mixolydian":["1 2 3 4 5 6 7b",["dominant"]],"dorian":["1 2 3b 4 5 6 7b"],"aeolian":["1 2 3b 4 5 6b 7b",["minor"]],"phrygian":["1 2b 3b 4 5 6b 7b"],"locrian":["1 2b 3b 4 5b 6b 7b"],"melodic minor":["1 2 3b 4 5 6 7"],"melodic minor second mode":["1 2b 3b 4 5 6 7b"],"lydian augmented":["1 2 3 4# 5A 6 7"],"lydian dominant":["1 2 3 4# 5 6 7b",["lydian b7"]],"melodic minor fifth mode":["1 2 3 4 5 6b 7b",["hindu","mixolydian b6"]],"locrian #2":["1 2 3b 4 5b 6b 7b"],"locrian major":["1 2 3 4 5b 6b 7b",["arabian"]],"altered":["1 2b 3b 3 5b 6b 7b",["super locrian","diminished whole tone","pomeroy"]],"major pentatonic":["1 2 3 5 6",["pentatonic"]],"lydian pentatonic":["1 3 4# 5 7",["chinese"]],"mixolydian pentatonic":["1 3 4 5 7b",["indian"]],"locrian pentatonic":["1 3b 4 5b 7b",["minor seven flat five pentatonic"]],"minor pentatonic":["1 3b 4 5 7b"],"minor six pentatonic":["1 3b 4 5 6"],"minor hexatonic":["1 2 3b 4 5 7"],"flat three pentatonic":["1 2 3b 5 6",["kumoi"]],"flat six pentatonic":["1 2 3 5 6b"],"major flat two pentatonic":["1 2b 3 5 6"],"whole tone pentatonic":["1 3 5b 6b 7b"],"ionian pentatonic":["1 3 4 5 7"],"lydian #5 pentatonic":["1 3 4# 5A 7"],"lydian dominant pentatonic":["1 3 4# 5 7b"],"minor #7 pentatonic":["1 3b 4 5 7"],"super locrian pentatonic":["1 3b 4d 5b 7b"],"in-sen":["1 2b 4 5 7b"],"iwato":["1 2b 4 5b 7b"],"hirajoshi":["1 2 3b 5 6b"],"kumoijoshi":["1 2b 4 5 6b"],"pelog":["1 2b 3b 5 6b"],"vietnamese 1":["1 3b 4 5 6b"],"vietnamese 2":["1 3b 4 5 7b"],"prometheus":["1 2 3 4# 6 7b"],"prometheus neopolitan":["1 2b 3 4# 6 7b"],"ritusen":["1 2 4 5 6"],"scriabin":["1 2b 3 5 6"],"piongio":["1 2 4 5 6 7b"],"major blues":["1 2 3b 3 5 6"],"minor blues":["1 3b 4 5b 5 7b",["blues"]],"composite blues":["1 2 3b 3 4 5b 5 6 7b"],"augmented":["1 2A 3 5 5A 7"],"augmented heptatonic":["1 2A 3 4 5 5A 7"],"dorian #4":["1 2 3b 4# 5 6 7b"],"lydian diminished":["1 2 3b 4# 5 6 7"],"whole tone":["1 2 3 4# 5A 7b"],"leading whole tone":["1 2 3 4# 5A 7b 7"],"harmonic minor":["1 2 3b 4 5 6b 7"],"lydian minor":["1 2 3 4# 5 6b 7b"],"neopolitan":["1 2b 3b 4 5 6b 7"],"neopolitan minor":["1 2b 3b 4 5 6b 7b"],"neopolitan major":["1 2b 3b 4 5 6 7",["dorian b2"]],"neopolitan major pentatonic":["1 3 4 5b 7b"],"romanian minor":["1 2 3b 5b 5 6 7b"],"double harmonic lydian":["1 2b 3 4# 5 6b 7"],"diminished":["1 2 3b 4 5b 6b 6 7"],"harmonic major":["1 2 3 4 5 6b 7"],"double harmonic major":["1 2b 3 4 5 6b 7",["gypsy"]],"egyptian":["1 2 4 5 7b"],"hungarian minor":["1 2 3b 4# 5 6b 7"],"hungarian major":["1 2A 3 4# 5 6 7b"],"oriental":["1 2b 3 4 5b 6 7b"],"spanish":["1 2b 3 4 5 6b 7b",["phrygian major"]],"spanish heptatonic":["1 2b 3b 3 4 5 6b 7b"],"flamenco":["1 2b 3b 3 4# 5 7b"],"balinese":["1 2b 3b 4 5 6b 7"],"todi raga":["1 2b 3b 4# 5 6b 7"],"malkos raga":["1 3b 4 6b 7b"],"kafi raga":["1 3b 3 4 5 6 7b 7"],"purvi raga":["1 2b 3 4 4# 5 6b 7"],"persian":["1 2b 3 4 5b 6b 7"],"bebop":["1 2 3 4 5 6 7b 7"],"bebop dominant":["1 2 3 4 5 6 7b 7"],"bebop minor":["1 2 3b 3 4 5 6 7b"],"bebop major":["1 2 3 4 5 5A 6 7"],"bebop locrian":["1 2b 3b 4 5b 5 6b 7b"],"minor bebop":["1 2 3b 4 5 6b 7b 7"],"mystery #1":["1 2b 3 5b 6b 7b"],"enigmatic":["1 2b 3 5b 6b 7b 7"],"minor six diminished":["1 2 3b 4 5 6b 6 7"],"ionian augmented":["1 2 3 4 5A 6 7"],"lydian #9":["1 2b 3 4# 5 6 7"],"ichikosucho":["1 2 3 4 5b 5 6 7"],"six tone symmetric":["1 2b 3 4 5A 6"]}')},function(n,e,t){"use strict";t.r(e);var r={};t.r(r),t.d(r,"EVENT_PLAY",(function(){return i})),t.d(r,"EVENT_PAUSE",(function(){return a})),t.d(r,"EVENT_RESET",(function(){return c})),t.d(r,"EVENT_PLAYBACK",(function(){return s})),t.d(r,"EVENT_AUDIO_UP",(function(){return u})),t.d(r,"EVENT_AUDIO_DOWN",(function(){return l})),t.d(r,"EVENT_MESSAGE",(function(){return b})),t.d(r,"EVENT_AUDIO_LOADING",(function(){return d})),t.d(r,"EVENT_AUDIO_LOADED",(function(){return f})),t.d(r,"EVENT_DATA_LOADING",(function(){return m})),t.d(r,"EVENT_DATA_LOADED",(function(){return p})),t.d(r,"EVENT_TONIC_CHANGE",(function(){return h})),t.d(r,"EVENT_SCALE_CHANGE",(function(){return v}));var o={};t.r(o),t.d(o,"fetchData",(function(){return _}));t(8);const i="play",a="pause",c="reset",s="playback",u="audio-up",l="audio-down",d="audio-loading",f="audio-loaded",b="message",m="data-loading",p="data-loaded",h="tonic-change",v="scale-change";var g=t(3),y=t.n(g);const E=["C","D","E","F","G","A","B"],A=y.a.names(),w={waveform:void 0},x=n=>{const{Waveform:e,Master:t}=n;let r=localStorage.getItem("tonic")||E[0],o=localStorage.getItem("scale")||A[0],i=[],a=0,c=void 0;const u=new e(4096),l=(({Freeverb:n})=>new n(.8,9e3))(n),d=(({Volume:n})=>new n(-10))(n),f=(({Compressor:n})=>new n(-5,16))(n),b=(({Compressor:n})=>new n(-15,8))(n),m=(({Channel:n})=>new n(-20))(n).chain(b,f,l,u,d,t),p=(({PolySynth:n,Synth:e})=>new n(64,e,{oscillator:{type:"triangle"},envelope:{attack:1.5,decay:3,sustain:.05,release:2}}))(n).connect(m),h=()=>{clearTimeout(c);const n=i.reduce((n,e)=>Math.min(n,e.value),1/0),e=i.reduce((n,e)=>Math.max(n,e.value),-1/0),t=i[a],u=t.value,l=((n,e)=>{const t=new y.a(n,e);return Array.from(Array(4).keys()).flatMap(n=>t.map(e=>`${e}${3+n}`))})(o,r),d=l[Math.round((u-n)*(l.length-1)/(e-n))],f=i.reduce((n,e)=>Math.min(n,e.start),1/0),b=i.reduce((n,e)=>Math.max(n,e.end),-1/0),m=.5*i.length/(b-f),v=(t.end-t.start)*m;p.triggerAttackRelease(d,Math.max(Math.min(v,4),2)),document.dispatchEvent(new CustomEvent(s,{detail:{title:t.title,pitch:d,playbackIndex:a}})),a=(a+1)%i.length;const g=i[a];c=setTimeout(h,(g.start-t.start>=0?g.start-t.start:t.end-t.start)*(1e3*m))},v=()=>{a=0};return Promise.resolve({waveform:u,onPlay:()=>{h()},onPause:()=>{p.releaseAll(),clearTimeout(c)},onReset:v,onLoadData:n=>{i=[...n].sort((n,e)=>n.start-e.start),v()},onTonicChange:n=>{r=n},onScaleChange:n=>{o=n}})},L=()=>(document.dispatchEvent(new Event(d)),t.e(1).then(t.t.bind(null,27,7)).then(x).then(({waveform:n,...e})=>{const{onPlay:t,onPause:r,onReset:o,onLoadData:s,onTonicChange:l,onScaleChange:d}=e;document.addEventListener(i,t),document.addEventListener(a,r),document.addEventListener(c,o),document.addEventListener(p,({detail:n})=>s(n)),document.addEventListener(h,({detail:n})=>l(n)),document.addEventListener(v,({detail:n})=>d(n)),document.dispatchEvent(new Event(f)),document.dispatchEvent(new Event(u)),w.waveform=n}).catch(n=>{throw document.dispatchEvent(new Event(l)),document.dispatchEvent(new Event(f)),n})),C=()=>{const n=document.createElement("select");return n.classList.add("selector"),n.classList.add("tonic-selector"),E.forEach(e=>{const t=document.createElement("option");t.value=e,t.textContent=e,localStorage.getItem("tonic")===e&&(t.selected=!0),n.appendChild(t)}),n.addEventListener("change",n=>{document.dispatchEvent(new CustomEvent(h,{detail:n.target.value})),localStorage.setItem("tonic",n.target.value)}),Promise.resolve(n)},P=()=>{const n=document.createElement("select");return n.classList.add("selector"),n.classList.add("scale-selector"),A.forEach(e=>{const t=document.createElement("option");t.value=e,t.textContent=e,localStorage.getItem("scale")===e&&(t.selected=!0),n.appendChild(t)}),n.addEventListener("change",n=>{document.dispatchEvent(new CustomEvent(v,{detail:n.target.value})),localStorage.setItem("scale",n.target.value)}),Promise.resolve(n)},M=()=>{const n=document.createElement("button");return n.textContent="Play",n.classList.add("btn-audio"),n.classList.add("paused"),n.disabled=!0,n.addEventListener("click",()=>document.dispatchEvent(new Event(n.classList.contains("paused")?i:a))),document.addEventListener(i,()=>{n.classList.remove("paused"),n.textContent="Pause"}),document.addEventListener(a,()=>{n.classList.add("paused"),n.textContent="Play"}),document.addEventListener(u,()=>{n.disabled=!1}),document.addEventListener(l,()=>{n.disabled=!0}),Promise.resolve(n)},j=()=>{const n=document.createElement("button");return n.textContent="Reset",n.classList.add("btn-reset"),n.disabled=!0,n.addEventListener("click",()=>{n.disabled=!0,document.dispatchEvent(new Event(c))}),document.addEventListener(s,({detail:{playbackIndex:e}})=>{n.disabled=0===e}),Promise.resolve(n)},T=()=>{const n=document.createElement("div");n.textContent="Loading...",n.classList.add("loader");const e=()=>{const e=Array.from(n.classList).filter(n=>n.startsWith("loading-")).map(n=>n.replace("loading-",""));n.textContent=`Loading ${e.join(", ")}...`};return document.addEventListener(d,()=>{n.classList.add("loading-audio"),e()}),document.addEventListener(f,()=>{n.classList.remove("loading-audio"),e()}),document.addEventListener(m,()=>{n.classList.add("loading-data"),e()}),document.addEventListener(p,()=>{n.classList.remove("loading-data"),e()}),Promise.resolve(n)},O=()=>{const n=document.createElement("div");return n.classList.add("message"),document.addEventListener(b,({detail:e})=>{n.classList.add("visible"),n.textContent=e}),Promise.resolve(n)},S=()=>{const n=document.createElement("div");return n.classList.add("playlist"),document.addEventListener(s,({detail:{title:e}})=>{const t=document.createElement("div");for(t.classList.add("playlist-item"),t.textContent=e,n.prepend(t);n.childElementCount>10;)n.removeChild(n.lastChild)}),Promise.resolve(n)},k=()=>{const n=document.createElement("canvas");n.classList.add("visualizer"),n.width=window.innerWidth,n.height=window.innerHeight,window.addEventListener("resize",()=>{n.width=window.innerWidth,n.height=window.innerHeight});const e=()=>{const t=w.waveform&&w.waveform.getValue();if(!t)return requestAnimationFrame(e);const r=n.getContext("2d"),{width:o,height:i}=n;r.clearRect(0,0,o,i),r.fillStyle="#00dddd",r.lineCap="round",r.beginPath(),r.moveTo(0,i);for(let n=0;n<t.length;n++){const e=n*o/t.length,a=(t[n]+1)*(i/2);r.lineTo(e,a)}r.lineTo(o,i),r.lineTo(0,i),r.fill(),requestAnimationFrame(e)};return e(),Promise.resolve(n)},_=()=>fetch("https://en.wikipedia.org/w/api.php?action=query&list=recentchanges&rcprop=title|sizes|flags|timestamp&rctype=edit&rclimit=500&origin=*&format=json").then(n=>n.json()).then(n=>n.query.recentchanges.map(n=>({title:`${n.title} (${new Date(n.timestamp).toLocaleDateString()}) ~ ${Math.abs(n.oldlen-n.newlen)}`,value:Math.log(Math.abs(n.oldlen-n.newlen)),start:new Date(n.timestamp).getTime()/1e3,end:new Date(n.timestamp).getTime()/1e3})).filter(n=>n.value>0));var N={wikipediaRecentChanges:o};window.DEBUG&&Object.values(r).forEach(n=>document.addEventListener(n,e=>console.info(n,...e.detail?[e.detail]:[]))),Promise.all([k(),C(),P(),M(),j(),T(),O(),S()]).then(n=>(n=>(Object.values(n).forEach(n=>document.body.appendChild(n)),Promise.resolve(!0)))(n)).then(()=>L()).then(()=>(n=>{const e=N[n]||Object.values(N).pop();return document.dispatchEvent(new Event(m)),e.fetchData().then(n=>document.dispatchEvent(new CustomEvent(p,{detail:n}))).catch(n=>{throw document.dispatchEvent(new Event(p)),n})})()).catch(n=>{console.error(n),document.dispatchEvent(new CustomEvent(b,{detail:n.message}))})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,